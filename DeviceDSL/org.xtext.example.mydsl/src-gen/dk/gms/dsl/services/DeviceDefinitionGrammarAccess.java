/*
 * generated by Xtext 2.26.0
 */
package dk.gms.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DeviceDefinitionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImportsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_0_1_0 = (RuleCall)cImportsAssignment_0_1.eContents().get(0);
		private final Keyword cSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGatewayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGatewayGatewayParserRuleCall_4_0 = (RuleCall)cGatewayAssignment_4.eContents().get(0);
		private final Assignment cGraphsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGraphsGraphParserRuleCall_5_0 = (RuleCall)cGraphsAssignment_5.eContents().get(0);
		
		//System:
		//    ('import' imports += Import)*
		//    'System' name=ID ':'
		//    gateway = Gateway
		//    graphs += Graph*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('import' imports += Import)*
		//'System' name=ID ':'
		//gateway = Gateway
		//graphs += Graph*
		public Group getGroup() { return cGroup; }
		
		//('import' imports += Import)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//imports += Import
		public Assignment getImportsAssignment_0_1() { return cImportsAssignment_0_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_1_0() { return cImportsImportParserRuleCall_0_1_0; }
		
		//'System'
		public Keyword getSystemKeyword_1() { return cSystemKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//gateway = Gateway
		public Assignment getGatewayAssignment_4() { return cGatewayAssignment_4; }
		
		//Gateway
		public RuleCall getGatewayGatewayParserRuleCall_4_0() { return cGatewayGatewayParserRuleCall_4_0; }
		
		//graphs += Graph*
		public Assignment getGraphsAssignment_5() { return cGraphsAssignment_5; }
		
		//Graph
		public RuleCall getGraphsGraphParserRuleCall_5_0() { return cGraphsGraphParserRuleCall_5_0; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeImportRefParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cCategoryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCategoryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCategorySTRINGTerminalRuleCall_6_0 = (RuleCall)cCategoryAssignment_6.eContents().get(0);
		private final Keyword cTitleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTitleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTitleSTRINGTerminalRuleCall_8_0 = (RuleCall)cTitleAssignment_8.eContents().get(0);
		private final Keyword cXKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cXlabelAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cXlabelSTRINGTerminalRuleCall_10_0 = (RuleCall)cXlabelAssignment_10.eContents().get(0);
		private final Keyword cYKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cYlabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cYlabelSTRINGTerminalRuleCall_12_0 = (RuleCall)cYlabelAssignment_12.eContents().get(0);
		
		//Graph:
		//    'Graph' name=ID ':'
		//    'type' type = ImportRef
		//    'category' category = STRING
		//    'title' title = STRING
		//    'x' xlabel = STRING
		//    'y' ylabel = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Graph' name=ID ':'
		//'type' type = ImportRef
		//'category' category = STRING
		//'title' title = STRING
		//'x' xlabel = STRING
		//'y' ylabel = STRING
		public Group getGroup() { return cGroup; }
		
		//'Graph'
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type = ImportRef
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//ImportRef
		public RuleCall getTypeImportRefParserRuleCall_4_0() { return cTypeImportRefParserRuleCall_4_0; }
		
		//'category'
		public Keyword getCategoryKeyword_5() { return cCategoryKeyword_5; }
		
		//category = STRING
		public Assignment getCategoryAssignment_6() { return cCategoryAssignment_6; }
		
		//STRING
		public RuleCall getCategorySTRINGTerminalRuleCall_6_0() { return cCategorySTRINGTerminalRuleCall_6_0; }
		
		//'title'
		public Keyword getTitleKeyword_7() { return cTitleKeyword_7; }
		
		//title = STRING
		public Assignment getTitleAssignment_8() { return cTitleAssignment_8; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_8_0() { return cTitleSTRINGTerminalRuleCall_8_0; }
		
		//'x'
		public Keyword getXKeyword_9() { return cXKeyword_9; }
		
		//xlabel = STRING
		public Assignment getXlabelAssignment_10() { return cXlabelAssignment_10; }
		
		//STRING
		public RuleCall getXlabelSTRINGTerminalRuleCall_10_0() { return cXlabelSTRINGTerminalRuleCall_10_0; }
		
		//'y'
		public Keyword getYKeyword_11() { return cYKeyword_11; }
		
		//ylabel = STRING
		public Assignment getYlabelAssignment_12() { return cYlabelAssignment_12; }
		
		//STRING
		public RuleCall getYlabelSTRINGTerminalRuleCall_12_0() { return cYlabelSTRINGTerminalRuleCall_12_0; }
	}
	public class GatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Gateway");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatewayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMacKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMacAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMacMACTerminalRuleCall_4_0 = (RuleCall)cMacAssignment_4.eContents().get(0);
		private final Assignment cWorkersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWorkersWorkerParserRuleCall_5_0 = (RuleCall)cWorkersAssignment_5.eContents().get(0);
		
		//Gateway:
		//    'Gateway' name=ID ':'
		//    'mac' mac = MAC
		//    workers += Worker+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Gateway' name=ID ':'
		//'mac' mac = MAC
		//workers += Worker+
		public Group getGroup() { return cGroup; }
		
		//'Gateway'
		public Keyword getGatewayKeyword_0() { return cGatewayKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'mac'
		public Keyword getMacKeyword_3() { return cMacKeyword_3; }
		
		//mac = MAC
		public Assignment getMacAssignment_4() { return cMacAssignment_4; }
		
		//MAC
		public RuleCall getMacMACTerminalRuleCall_4_0() { return cMacMACTerminalRuleCall_4_0; }
		
		//workers += Worker+
		public Assignment getWorkersAssignment_5() { return cWorkersAssignment_5; }
		
		//Worker
		public RuleCall getWorkersWorkerParserRuleCall_5_0() { return cWorkersWorkerParserRuleCall_5_0; }
	}
	public class WorkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Worker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMacKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMacAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMacMACTerminalRuleCall_4_0 = (RuleCall)cMacAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSleepKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cForKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSleepTimeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSleepTimeINTTerminalRuleCall_5_2_0 = (RuleCall)cSleepTimeAssignment_5_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_5_3_0 = (RuleCall)cTimeUnitAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBroadcastKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cForKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBroadcastTimeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBroadcastTimeINTTerminalRuleCall_6_2_0 = (RuleCall)cBroadcastTimeAssignment_6_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_6_3_0 = (RuleCall)cTimeUnitAssignment_6_3.eContents().get(0);
		private final Assignment cDevicesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cDevicesAlternatives_7_0 = (Alternatives)cDevicesAssignment_7.eContents().get(0);
		private final RuleCall cDevicesSensorParserRuleCall_7_0_0 = (RuleCall)cDevicesAlternatives_7_0.eContents().get(0);
		private final RuleCall cDevicesActuatorParserRuleCall_7_0_1 = (RuleCall)cDevicesAlternatives_7_0.eContents().get(1);
		
		//Worker:
		//    'Worker' name=ID ':'
		//    'mac' mac = MAC
		//    ('sleep' 'for' sleepTime = INT timeUnit += TimeUnit)?
		//    ('broadcast' 'for' broadcastTime = INT timeUnit += TimeUnit)?
		//    devices += (Sensor | Actuator)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Worker' name=ID ':'
		//'mac' mac = MAC
		//('sleep' 'for' sleepTime = INT timeUnit += TimeUnit)?
		//('broadcast' 'for' broadcastTime = INT timeUnit += TimeUnit)?
		//devices += (Sensor | Actuator)*
		public Group getGroup() { return cGroup; }
		
		//'Worker'
		public Keyword getWorkerKeyword_0() { return cWorkerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'mac'
		public Keyword getMacKeyword_3() { return cMacKeyword_3; }
		
		//mac = MAC
		public Assignment getMacAssignment_4() { return cMacAssignment_4; }
		
		//MAC
		public RuleCall getMacMACTerminalRuleCall_4_0() { return cMacMACTerminalRuleCall_4_0; }
		
		//('sleep' 'for' sleepTime = INT timeUnit += TimeUnit)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sleep'
		public Keyword getSleepKeyword_5_0() { return cSleepKeyword_5_0; }
		
		//'for'
		public Keyword getForKeyword_5_1() { return cForKeyword_5_1; }
		
		//sleepTime = INT
		public Assignment getSleepTimeAssignment_5_2() { return cSleepTimeAssignment_5_2; }
		
		//INT
		public RuleCall getSleepTimeINTTerminalRuleCall_5_2_0() { return cSleepTimeINTTerminalRuleCall_5_2_0; }
		
		//timeUnit += TimeUnit
		public Assignment getTimeUnitAssignment_5_3() { return cTimeUnitAssignment_5_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_5_3_0() { return cTimeUnitTimeUnitParserRuleCall_5_3_0; }
		
		//('broadcast' 'for' broadcastTime = INT timeUnit += TimeUnit)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'broadcast'
		public Keyword getBroadcastKeyword_6_0() { return cBroadcastKeyword_6_0; }
		
		//'for'
		public Keyword getForKeyword_6_1() { return cForKeyword_6_1; }
		
		//broadcastTime = INT
		public Assignment getBroadcastTimeAssignment_6_2() { return cBroadcastTimeAssignment_6_2; }
		
		//INT
		public RuleCall getBroadcastTimeINTTerminalRuleCall_6_2_0() { return cBroadcastTimeINTTerminalRuleCall_6_2_0; }
		
		//timeUnit += TimeUnit
		public Assignment getTimeUnitAssignment_6_3() { return cTimeUnitAssignment_6_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_6_3_0() { return cTimeUnitTimeUnitParserRuleCall_6_3_0; }
		
		//devices += (Sensor | Actuator)*
		public Assignment getDevicesAssignment_7() { return cDevicesAssignment_7; }
		
		//(Sensor | Actuator)
		public Alternatives getDevicesAlternatives_7_0() { return cDevicesAlternatives_7_0; }
		
		//Sensor
		public RuleCall getDevicesSensorParserRuleCall_7_0_0() { return cDevicesSensorParserRuleCall_7_0_0; }
		
		//Actuator
		public RuleCall getDevicesActuatorParserRuleCall_7_0_1() { return cDevicesActuatorParserRuleCall_7_0_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeImportRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinsINTTerminalRuleCall_5_0 = (RuleCall)cPinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPinsINTTerminalRuleCall_6_1_0 = (RuleCall)cPinsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRateKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSampleRateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSampleRatePrimitiveParserRuleCall_9_0 = (RuleCall)cSampleRateAssignment_9.eContents().get(0);
		private final Assignment cOutputsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOutputsSensorOutputParserRuleCall_10_0 = (RuleCall)cOutputsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cBehaviorKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cBehaviorAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cBehaviorSampleBehaviorParserRuleCall_11_1_0 = (RuleCall)cBehaviorAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPredicateKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cPredicateAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cPredicateExpParserRuleCall_12_1_0 = (RuleCall)cPredicateAssignment_12_1.eContents().get(0);
		private final Keyword cGraphKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cGraphAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cGraphGraphCrossReference_14_0 = (CrossReference)cGraphAssignment_14.eContents().get(0);
		private final RuleCall cGraphGraphIDTerminalRuleCall_14_0_1 = (RuleCall)cGraphGraphCrossReference_14_0.eContents().get(1);
		
		//Sensor:
		//    'Sensor' type = ImportRef ':'
		//    'pins' '(' pins += INT* (',' pins += INT)* ')'
		//    'rate' sampleRate = Primitive
		//    (outputs += SensorOutput)*
		//    ('behavior' behavior += SampleBehavior)?
		//    ('predicate' predicate += Exp)?
		//    'graph' graph = [Graph]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' type = ImportRef ':'
		//'pins' '(' pins += INT* (',' pins += INT)* ')'
		//'rate' sampleRate = Primitive
		//(outputs += SensorOutput)*
		//('behavior' behavior += SampleBehavior)?
		//('predicate' predicate += Exp)?
		//'graph' graph = [Graph]
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//type = ImportRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ImportRef
		public RuleCall getTypeImportRefParserRuleCall_1_0() { return cTypeImportRefParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'pins'
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//pins += INT*
		public Assignment getPinsAssignment_5() { return cPinsAssignment_5; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_5_0() { return cPinsINTTerminalRuleCall_5_0; }
		
		//(',' pins += INT)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pins += INT
		public Assignment getPinsAssignment_6_1() { return cPinsAssignment_6_1; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_6_1_0() { return cPinsINTTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'rate'
		public Keyword getRateKeyword_8() { return cRateKeyword_8; }
		
		//sampleRate = Primitive
		public Assignment getSampleRateAssignment_9() { return cSampleRateAssignment_9; }
		
		//Primitive
		public RuleCall getSampleRatePrimitiveParserRuleCall_9_0() { return cSampleRatePrimitiveParserRuleCall_9_0; }
		
		//(outputs += SensorOutput)*
		public Assignment getOutputsAssignment_10() { return cOutputsAssignment_10; }
		
		//SensorOutput
		public RuleCall getOutputsSensorOutputParserRuleCall_10_0() { return cOutputsSensorOutputParserRuleCall_10_0; }
		
		//('behavior' behavior += SampleBehavior)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_11_0() { return cBehaviorKeyword_11_0; }
		
		//behavior += SampleBehavior
		public Assignment getBehaviorAssignment_11_1() { return cBehaviorAssignment_11_1; }
		
		//SampleBehavior
		public RuleCall getBehaviorSampleBehaviorParserRuleCall_11_1_0() { return cBehaviorSampleBehaviorParserRuleCall_11_1_0; }
		
		//('predicate' predicate += Exp)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'predicate'
		public Keyword getPredicateKeyword_12_0() { return cPredicateKeyword_12_0; }
		
		//predicate += Exp
		public Assignment getPredicateAssignment_12_1() { return cPredicateAssignment_12_1; }
		
		//Exp
		public RuleCall getPredicateExpParserRuleCall_12_1_0() { return cPredicateExpParserRuleCall_12_1_0; }
		
		//'graph'
		public Keyword getGraphKeyword_13() { return cGraphKeyword_13; }
		
		//graph = [Graph]
		public Assignment getGraphAssignment_14() { return cGraphAssignment_14; }
		
		//[Graph]
		public CrossReference getGraphGraphCrossReference_14_0() { return cGraphGraphCrossReference_14_0; }
		
		//ID
		public RuleCall getGraphGraphIDTerminalRuleCall_14_0_1() { return cGraphGraphIDTerminalRuleCall_14_0_1; }
	}
	public class SampleBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.SampleBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeImportRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsPrimaryParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPinsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPinsPrimaryParserRuleCall_3_1_0 = (RuleCall)cPinsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SampleBehavior:
		//    type = ImportRef '(' args += Primary* (',' pins += Primary)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ImportRef '(' args += Primary* (',' pins += Primary)* ')'
		public Group getGroup() { return cGroup; }
		
		//type = ImportRef
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ImportRef
		public RuleCall getTypeImportRefParserRuleCall_0_0() { return cTypeImportRefParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args += Primary*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Primary
		public RuleCall getArgsPrimaryParserRuleCall_2_0() { return cArgsPrimaryParserRuleCall_2_0; }
		
		//(',' pins += Primary)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//pins += Primary
		public Assignment getPinsAssignment_3_1() { return cPinsAssignment_3_1; }
		
		//Primary
		public RuleCall getPinsPrimaryParserRuleCall_3_1_0() { return cPinsPrimaryParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSecondAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cSecondKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cSecondsKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinuteAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cMinuteKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cMinutesKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cHourAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cHourKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cHoursKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//TimeUnit:
		//    {Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Second} ('second'|'seconds')
		public Group getGroup_0() { return cGroup_0; }
		
		//{Second}
		public Action getSecondAction_0_0() { return cSecondAction_0_0; }
		
		//('second'|'seconds')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'second'
		public Keyword getSecondKeyword_0_1_0() { return cSecondKeyword_0_1_0; }
		
		//'seconds'
		public Keyword getSecondsKeyword_0_1_1() { return cSecondsKeyword_0_1_1; }
		
		//{Minute} ('minute'|'minutes')
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minute}
		public Action getMinuteAction_1_0() { return cMinuteAction_1_0; }
		
		//('minute'|'minutes')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'minute'
		public Keyword getMinuteKeyword_1_1_0() { return cMinuteKeyword_1_1_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_1_1_1() { return cMinutesKeyword_1_1_1; }
		
		//{Hour} ('hour'|'hours')
		public Group getGroup_2() { return cGroup_2; }
		
		//{Hour}
		public Action getHourAction_2_0() { return cHourAction_2_0; }
		
		//('hour'|'hours')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'hour'
		public Keyword getHourKeyword_2_1_0() { return cHourKeyword_2_1_0; }
		
		//'hours'
		public Keyword getHoursKeyword_2_1_1() { return cHoursKeyword_2_1_1; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Binding");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Binding:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class BindingRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.BindingRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefBindingCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_0_1 = (RuleCall)cRefBindingCrossReference_0.eContents().get(1);
		
		//BindingRef:
		//    ref = [Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref = [Binding]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_0() { return cRefBindingCrossReference_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_0_1() { return cRefBindingIDTerminalRuleCall_0_1; }
	}
	public class SensorOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.SensorOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputSTRINGTerminalRuleCall_1_0 = (RuleCall)cOutputAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBindingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBindingBindingParserRuleCall_3_0 = (RuleCall)cBindingAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cMappingKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMappingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMappingExpParserRuleCall_4_2_0 = (RuleCall)cMappingAssignment_4_2.eContents().get(0);
		
		//SensorOutput:
		//    'out' (output=STRING)? 'as' binding = Binding ('with' 'mapping' mapping = Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' (output=STRING)? 'as' binding = Binding ('with' 'mapping' mapping = Exp)?
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//(output=STRING)?
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_1_0() { return cOutputSTRINGTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//binding = Binding
		public Assignment getBindingAssignment_3() { return cBindingAssignment_3; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_3_0() { return cBindingBindingParserRuleCall_3_0; }
		
		//('with' 'mapping' mapping = Exp)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//'mapping'
		public Keyword getMappingKeyword_4_1() { return cMappingKeyword_4_1; }
		
		//mapping = Exp
		public Assignment getMappingAssignment_4_2() { return cMappingAssignment_4_2; }
		
		//Exp
		public RuleCall getMappingExpParserRuleCall_4_2_0() { return cMappingExpParserRuleCall_4_2_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeImportRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinsINTTerminalRuleCall_5_0 = (RuleCall)cPinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPinsINTTerminalRuleCall_6_1_0 = (RuleCall)cPinsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSettingsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSettingsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSettingsSettingParserRuleCall_10_0 = (RuleCall)cSettingsAssignment_10.eContents().get(0);
		private final Keyword cTriggerKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cOnKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cExpAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cExpExpParserRuleCall_13_0 = (RuleCall)cExpAssignment_13.eContents().get(0);
		
		//Actuator:
		//    'Actuator' type = ImportRef ':'
		//    'pins' '(' pins += INT* (',' pins += INT)* ')'
		//    'Settings' ':' settings += Setting*
		//    'trigger' 'on' exp = Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actuator' type = ImportRef ':'
		//'pins' '(' pins += INT* (',' pins += INT)* ')'
		//'Settings' ':' settings += Setting*
		//'trigger' 'on' exp = Exp
		public Group getGroup() { return cGroup; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//type = ImportRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ImportRef
		public RuleCall getTypeImportRefParserRuleCall_1_0() { return cTypeImportRefParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'pins'
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//pins += INT*
		public Assignment getPinsAssignment_5() { return cPinsAssignment_5; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_5_0() { return cPinsINTTerminalRuleCall_5_0; }
		
		//(',' pins += INT)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pins += INT
		public Assignment getPinsAssignment_6_1() { return cPinsAssignment_6_1; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_6_1_0() { return cPinsINTTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'Settings'
		public Keyword getSettingsKeyword_8() { return cSettingsKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//settings += Setting*
		public Assignment getSettingsAssignment_10() { return cSettingsAssignment_10; }
		
		//Setting
		public RuleCall getSettingsSettingParserRuleCall_10_0() { return cSettingsSettingParserRuleCall_10_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_11() { return cTriggerKeyword_11; }
		
		//'on'
		public Keyword getOnKeyword_12() { return cOnKeyword_12; }
		
		//exp = Exp
		public Assignment getExpAssignment_13() { return cExpAssignment_13; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_13_0() { return cExpExpParserRuleCall_13_0; }
	}
	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Setting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingBindingParserRuleCall_0_0 = (RuleCall)cBindingAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Setting:
		//    binding = Binding '=' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//binding = Binding '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//binding = Binding
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_0_0() { return cBindingBindingParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Import");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Import:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ImportRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.ImportRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefImportCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefImportIDTerminalRuleCall_0_1 = (RuleCall)cRefImportCrossReference_0.eContents().get(1);
		
		//ImportRef:
		//    ref = [Import]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref = [Import]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Import]
		public CrossReference getRefImportCrossReference_0() { return cRefImportCrossReference_0; }
		
		//ID
		public RuleCall getRefImportIDTerminalRuleCall_0_1() { return cRefImportIDTerminalRuleCall_0_1; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDecimalPrimitiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntPrimitiveAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTrueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTRUEKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanFalseAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFALSEKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Primitive:
		//    {DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DecimalPrimitive} value = DECIMAL
		public Group getGroup_0() { return cGroup_0; }
		
		//{DecimalPrimitive}
		public Action getDecimalPrimitiveAction_0_0() { return cDecimalPrimitiveAction_0_0; }
		
		//value = DECIMAL
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0_1_0() { return cValueDECIMALTerminalRuleCall_0_1_0; }
		
		//{IntPrimitive} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntPrimitive}
		public Action getIntPrimitiveAction_1_0() { return cIntPrimitiveAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{BooleanTrue} 'TRUE'
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanTrue}
		public Action getBooleanTrueAction_2_0() { return cBooleanTrueAction_2_0; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2_1() { return cTRUEKeyword_2_1; }
		
		//{BooleanFalse} 'FALSE'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanFalse}
		public Action getBooleanFalseAction_3_0() { return cBooleanFalseAction_3_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_3_1() { return cFALSEKeyword_3_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_1_0() { return cRightCompareParserRuleCall_1_1_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOrEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLesserLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareOrEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Compare returns Expression:
		//    CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		public Group getGroup() { return cGroup; }
		
		//CompareOrEquals
		public RuleCall getCompareOrEqualsParserRuleCall_0() { return cCompareOrEqualsParserRuleCall_0; }
		
		//(( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Greater.left=current} '>' | {Lesser.left=current}  '<' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Greater.left=current} '>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_0_0() { return cGreaterLeftAction_1_0_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_1() { return cGreaterThanSignKeyword_1_0_0_1; }
		
		//{Lesser.left=current}  '<'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Lesser.left=current}
		public Action getLesserLeftAction_1_0_1_0() { return cLesserLeftAction_1_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }
		
		//right=CompareOrEquals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CompareOrEquals
		public RuleCall getRightCompareOrEqualsParserRuleCall_1_1_0() { return cRightCompareOrEqualsParserRuleCall_1_1_0; }
	}
	public class CompareOrEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.CompareOrEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsOrNotEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterOrEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLesserOrEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsOrNotEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareOrEquals returns Expression:
		//    EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		public Group getGroup() { return cGroup; }
		
		//EqualsOrNotEquals
		public RuleCall getEqualsOrNotEqualsParserRuleCall_0() { return cEqualsOrNotEqualsParserRuleCall_0; }
		
		//(({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{GreaterOrEquals.left=current} '>='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{GreaterOrEquals.left=current}
		public Action getGreaterOrEqualsLeftAction_1_0_0_0() { return cGreaterOrEqualsLeftAction_1_0_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//{LesserOrEquals.left=current}  '<='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{LesserOrEquals.left=current}
		public Action getLesserOrEqualsLeftAction_1_0_1_0() { return cLesserOrEqualsLeftAction_1_0_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }
		
		//right=EqualsOrNotEquals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EqualsOrNotEquals
		public RuleCall getRightEqualsOrNotEqualsParserRuleCall_1_1_0() { return cRightEqualsOrNotEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsOrNotEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.EqualsOrNotEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNotEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndOrParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualsOrNotEquals returns Expression:
		//    AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		public Group getGroup() { return cGroup; }
		
		//AndOr
		public RuleCall getAndOrParserRuleCall_0() { return cAndOrParserRuleCall_0; }
		
		//(({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} '==' | {NotEquals.left=current}  '!=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equals.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_0() { return cEqualsLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{NotEquals.left=current}  '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{NotEquals.left=current}
		public Action getNotEqualsLeftAction_1_0_1_0() { return cNotEqualsLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=AndOr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndOr
		public RuleCall getRightAndOrParserRuleCall_1_1_0() { return cRightAndOrParserRuleCall_1_1_0; }
	}
	public class AndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.AndOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndOr returns Expression:
		//    Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({And.left=current} 'and' | {Or.left=current}  'or' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{And.left=current} 'and'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_1() { return cAndKeyword_1_0_0_1; }
		
		//{Or.left=current}  'or'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_0_1_1() { return cOrKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindingRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Expression:
		//    Primitive  | Parenthesis | BindingRef | ExternalCall
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive  | Parenthesis | BindingRef | ExternalCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
		
		//BindingRef
		public RuleCall getBindingRefParserRuleCall_2() { return cBindingRefParserRuleCall_2; }
		
		//ExternalCall
		public RuleCall getExternalCallParserRuleCall_3() { return cExternalCallParserRuleCall_3; }
	}
	public class ExternalCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.ExternalCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncImportRefParserRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalCall:
		//    func = ImportRef '(' args += Exp? (',' args += Exp)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//func = ImportRef '(' args += Exp? (',' args += Exp)* ')'
		public Group getGroup() { return cGroup; }
		
		//func = ImportRef
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//ImportRef
		public RuleCall getFuncImportRefParserRuleCall_0_0() { return cFuncImportRefParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args += Exp?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_2_0() { return cArgsExpParserRuleCall_2_0; }
		
		//(',' args += Exp)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args += Exp
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_3_1_0() { return cArgsExpParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis:
		//    '(' exp=Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_0() { return cExpExpParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private final SystemElements pSystem;
	private final GraphElements pGraph;
	private final GatewayElements pGateway;
	private final WorkerElements pWorker;
	private final TerminalRule tMAC;
	private final TerminalRule tHEXBYTE;
	private final SensorElements pSensor;
	private final SampleBehaviorElements pSampleBehavior;
	private final TimeUnitElements pTimeUnit;
	private final BindingElements pBinding;
	private final BindingRefElements pBindingRef;
	private final SensorOutputElements pSensorOutput;
	private final ActuatorElements pActuator;
	private final SettingElements pSetting;
	private final TerminalRule tDECIMAL;
	private final ImportElements pImport;
	private final ImportRefElements pImportRef;
	private final PrimitiveElements pPrimitive;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final CompareElements pCompare;
	private final CompareOrEqualsElements pCompareOrEquals;
	private final EqualsOrNotEqualsElements pEqualsOrNotEquals;
	private final AndOrElements pAndOr;
	private final PrimaryElements pPrimary;
	private final ExternalCallElements pExternalCall;
	private final ParenthesisElements pParenthesis;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeviceDefinitionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pGraph = new GraphElements();
		this.pGateway = new GatewayElements();
		this.pWorker = new WorkerElements();
		this.tMAC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.MAC");
		this.tHEXBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.HEXBYTE");
		this.pSensor = new SensorElements();
		this.pSampleBehavior = new SampleBehaviorElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pBinding = new BindingElements();
		this.pBindingRef = new BindingRefElements();
		this.pSensorOutput = new SensorOutputElements();
		this.pActuator = new ActuatorElements();
		this.pSetting = new SettingElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.DECIMAL");
		this.pImport = new ImportElements();
		this.pImportRef = new ImportRefElements();
		this.pPrimitive = new PrimitiveElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pCompare = new CompareElements();
		this.pCompareOrEquals = new CompareOrEqualsElements();
		this.pEqualsOrNotEquals = new EqualsOrNotEqualsElements();
		this.pAndOr = new AndOrElements();
		this.pPrimary = new PrimaryElements();
		this.pExternalCall = new ExternalCallElements();
		this.pParenthesis = new ParenthesisElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.gms.dsl.DeviceDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//    ('import' imports += Import)*
	//    'System' name=ID ':'
	//    gateway = Gateway
	//    graphs += Graph*
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Graph:
	//    'Graph' name=ID ':'
	//    'type' type = ImportRef
	//    'category' category = STRING
	//    'title' title = STRING
	//    'x' xlabel = STRING
	//    'y' ylabel = STRING
	//;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//Gateway:
	//    'Gateway' name=ID ':'
	//    'mac' mac = MAC
	//    workers += Worker+
	//;
	public GatewayElements getGatewayAccess() {
		return pGateway;
	}
	
	public ParserRule getGatewayRule() {
		return getGatewayAccess().getRule();
	}
	
	//Worker:
	//    'Worker' name=ID ':'
	//    'mac' mac = MAC
	//    ('sleep' 'for' sleepTime = INT timeUnit += TimeUnit)?
	//    ('broadcast' 'for' broadcastTime = INT timeUnit += TimeUnit)?
	//    devices += (Sensor | Actuator)*
	//;
	public WorkerElements getWorkerAccess() {
		return pWorker;
	}
	
	public ParserRule getWorkerRule() {
		return getWorkerAccess().getRule();
	}
	
	//terminal MAC:
	//    HEXBYTE ('-'|':') HEXBYTE ('-'|':') HEXBYTE ('-'|':') HEXBYTE ('-'|':') HEXBYTE ('-'|':') HEXBYTE
	//;
	public TerminalRule getMACRule() {
		return tMAC;
	}
	
	//terminal fragment HEXBYTE:
	//    ('0'..'9'|'A'..'F')('0'..'9'|'A'..'F')
	//;
	public TerminalRule getHEXBYTERule() {
		return tHEXBYTE;
	}
	
	//Sensor:
	//    'Sensor' type = ImportRef ':'
	//    'pins' '(' pins += INT* (',' pins += INT)* ')'
	//    'rate' sampleRate = Primitive
	//    (outputs += SensorOutput)*
	//    ('behavior' behavior += SampleBehavior)?
	//    ('predicate' predicate += Exp)?
	//    'graph' graph = [Graph]
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SampleBehavior:
	//    type = ImportRef '(' args += Primary* (',' pins += Primary)* ')'
	//;
	public SampleBehaviorElements getSampleBehaviorAccess() {
		return pSampleBehavior;
	}
	
	public ParserRule getSampleBehaviorRule() {
		return getSampleBehaviorAccess().getRule();
	}
	
	//TimeUnit:
	//    {Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Binding:
	//    name=ID
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//BindingRef:
	//    ref = [Binding]
	//;
	public BindingRefElements getBindingRefAccess() {
		return pBindingRef;
	}
	
	public ParserRule getBindingRefRule() {
		return getBindingRefAccess().getRule();
	}
	
	//SensorOutput:
	//    'out' (output=STRING)? 'as' binding = Binding ('with' 'mapping' mapping = Exp)?
	//;
	public SensorOutputElements getSensorOutputAccess() {
		return pSensorOutput;
	}
	
	public ParserRule getSensorOutputRule() {
		return getSensorOutputAccess().getRule();
	}
	
	//Actuator:
	//    'Actuator' type = ImportRef ':'
	//    'pins' '(' pins += INT* (',' pins += INT)* ')'
	//    'Settings' ':' settings += Setting*
	//    'trigger' 'on' exp = Exp
	//;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Setting:
	//    binding = Binding '=' value=INT
	//;
	public SettingElements getSettingAccess() {
		return pSetting;
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}
	
	//terminal DECIMAL:
	//    '-'? INT ('.' INT)+
	//;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//Import:
	//    name=ID
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportRef:
	//    ref = [Import]
	//;
	public ImportRefElements getImportRefAccess() {
		return pImportRef;
	}
	
	public ParserRule getImportRefRule() {
		return getImportRefAccess().getRule();
	}
	
	//Primitive:
	//    {DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
	//;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Compare returns Expression:
	//    CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
	//;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//CompareOrEquals returns Expression:
	//    EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
	//;
	public CompareOrEqualsElements getCompareOrEqualsAccess() {
		return pCompareOrEquals;
	}
	
	public ParserRule getCompareOrEqualsRule() {
		return getCompareOrEqualsAccess().getRule();
	}
	
	//EqualsOrNotEquals returns Expression:
	//    AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
	//;
	public EqualsOrNotEqualsElements getEqualsOrNotEqualsAccess() {
		return pEqualsOrNotEquals;
	}
	
	public ParserRule getEqualsOrNotEqualsRule() {
		return getEqualsOrNotEqualsAccess().getRule();
	}
	
	//AndOr returns Expression:
	//    Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
	//;
	public AndOrElements getAndOrAccess() {
		return pAndOr;
	}
	
	public ParserRule getAndOrRule() {
		return getAndOrAccess().getRule();
	}
	
	//Primary returns Expression:
	//    Primitive  | Parenthesis | BindingRef | ExternalCall
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//ExternalCall:
	//    func = ImportRef '(' args += Exp? (',' args += Exp)* ')'
	//;
	public ExternalCallElements getExternalCallAccess() {
		return pExternalCall;
	}
	
	public ParserRule getExternalCallRule() {
		return getExternalCallAccess().getRule();
	}
	
	//Parenthesis:
	//    '(' exp=Exp ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
