/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.scoping;

import com.google.common.base.Objects;
import dk.sdu.gms.dds.Utils;
import dk.sdu.gms.dds.deviceDefinition.Actuator;
import dk.sdu.gms.dds.deviceDefinition.Binding;
import dk.sdu.gms.dds.deviceDefinition.Device;
import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.ExternalVariableUse;
import dk.sdu.gms.dds.deviceDefinition.GraphVariableUse;
import dk.sdu.gms.dds.deviceDefinition.Sensor;
import dk.sdu.gms.dds.deviceDefinition.Worker;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DeviceDefinitionScopeProvider extends AbstractDeviceDefinitionScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof ExternalVariableUse) && Objects.equal(reference, DeviceDefinitionPackage.Literals.VARIABLE_USE__REF))) {
      final Device obj = ((ExternalVariableUse) context).getObj();
      if ((obj instanceof Sensor)) {
        return Scopes.scopeFor(Stream.<Binding>concat(((Sensor)obj).getSettings().stream(), ((Sensor)obj).getOutputs().stream()).collect(Collectors.<Binding>toList()));
      }
      if ((obj instanceof Actuator)) {
        return Scopes.scopeFor(((Actuator) obj).getSettings());
      }
    }
    if ((context instanceof GraphVariableUse)) {
      boolean _equals = Objects.equal(reference, DeviceDefinitionPackage.Literals.GRAPH_VARIABLE_USE__WORKER);
      if (_equals) {
        Worker _worker = ((GraphVariableUse)context).getWorker();
        boolean _tripleEquals = (_worker == null);
        if (_tripleEquals) {
          return super.getScope(context, reference);
        }
        return Scopes.scopeFor(Utils.system(context).getGateway().getWorkers());
      }
      boolean _equals_1 = Objects.equal(reference, DeviceDefinitionPackage.Literals.GRAPH_VARIABLE_USE__DEVICE);
      if (_equals_1) {
        Worker _worker_1 = ((GraphVariableUse)context).getWorker();
        boolean _tripleEquals_1 = (_worker_1 == null);
        if (_tripleEquals_1) {
          return super.getScope(context, reference);
        }
        final Predicate<Device> _function = (Device x) -> {
          return (x instanceof Sensor);
        };
        return Scopes.scopeFor(((GraphVariableUse)context).getWorker().getDevices().stream().filter(_function).collect(Collectors.<Device>toList()));
      }
      boolean _equals_2 = Objects.equal(reference, DeviceDefinitionPackage.Literals.VARIABLE_USE__REF);
      if (_equals_2) {
        Device _device = ((GraphVariableUse)context).getDevice();
        boolean _tripleEquals_2 = (_device == null);
        if (_tripleEquals_2) {
          return super.getScope(context, reference);
        }
        final Device device = ((GraphVariableUse)context).getDevice();
        IScope _switchResult = null;
        boolean _matched = false;
        if (device instanceof Sensor) {
          _matched=true;
          _switchResult = Scopes.scopeFor(Stream.<Binding>concat(((Sensor)device).getSettings().stream(), ((Sensor)device).getOutputs().stream()).collect(Collectors.<Binding>toList()));
        }
        if (!_matched) {
          if (device instanceof Actuator) {
            _matched=true;
            _switchResult = Scopes.scopeFor(((Actuator)device).getSettings());
          }
        }
        return _switchResult;
      }
    }
    return super.getScope(context, reference);
  }
}
