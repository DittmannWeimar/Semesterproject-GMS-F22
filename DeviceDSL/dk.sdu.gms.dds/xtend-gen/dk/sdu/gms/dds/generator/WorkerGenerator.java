package dk.sdu.gms.dds.generator;

import dk.sdu.gms.dds.deviceDefinition.Worker;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;

@SuppressWarnings("all")
public class WorkerGenerator {
  public static Object generateWorker(final Worker worker, final IFileSystemAccess2 fsa) {
    return null;
  }
  
  public static CharSequence generateCode(final Worker worker) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include <esp_now.h>");
    _builder.newLine();
    _builder.append("#include <esp_wifi.h>");
    _builder.newLine();
    _builder.append("#include <WiFi.h>");
    _builder.newLine();
    _builder.append("#include <Wire.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <Adafruit_AM2320.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"DHT.h\"");
    _builder.newLine();
    _builder.append("#define DHTTYPE DHT11   // DHT 11");
    _builder.newLine();
    _builder.newLine();
    _builder.append("uint8_t gatewayAddress[] = {0x84, 0xCC, 0xA8, 0x2D, 0xDE, 0x3C};");
    _builder.newLine();
    _builder.append("esp_now_peer_info_t gatewayInfo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("enum MESSAGE_TYPE { Ping, Setting, Sample };");
    _builder.newLine();
    _builder.append("float sampleRate = 0.5;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Readings cache");
    _builder.newLine();
    _builder.append("float temperature;");
    _builder.newLine();
    _builder.append("float humidity;");
    _builder.newLine();
    _builder.append("int moisture;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int dhtPin = 4;");
    _builder.newLine();
    _builder.append("DHT dht(dhtPin, DHTTYPE);");
    _builder.newLine();
    _builder.append("int soilPin = 32;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int ledPin = 26;");
    _builder.newLine();
    _builder.append("int pumpPin = 25;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("float ledTemperatureThreshold = 30;");
    _builder.newLine();
    _builder.append("float pumpMoistureThreshold = 800;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const int freq = 5000;");
    _builder.newLine();
    _builder.append("const int ledChannel = 0;");
    _builder.newLine();
    _builder.append("const int resolution = 8;");
    _builder.newLine();
    _builder.append("const bool scan = true;");
    _builder.newLine();
    _builder.append("const String STATION_NAME = \"Gateway\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int espnow_channel = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void setup() {");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("// Set pinModes");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("pinMode(ledPin, OUTPUT);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("pinMode(pumpPin, OUTPUT);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("pinMode(soilPin, INPUT);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("WiFi.mode(WIFI_STA);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("WiFi.disconnect();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if(scan) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("uint8_t networks = WiFi.scanNetworks();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(int n=0;n<networks;n++) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Serial.printf(\"%d %s   %d   %d %s \\n\", n,WiFi.SSID(n).c_str(),WiFi.RSSI(n), WiFi.channel(n), WiFi.BSSIDstr(n).c_str());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(int i=0;i<8;i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Serial.print(WiFi.BSSID(n)[i]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Serial.print(\" \");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Serial.println();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(WiFi.SSID(n).indexOf(STATION_NAME) == 0)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Serial.println(\"Found\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("memcpy(gatewayAddress, WiFi.BSSID(n), 6);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("espnow_channel = WiFi.channel(n);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("WiFi.scanDelete();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_wifi_set_promiscuous(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_wifi_set_channel(espnow_channel, WIFI_SECOND_CHAN_NONE);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_wifi_set_promiscuous(false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.begin(115200);");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Set device as a Wi-Fi Station");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("WiFi.mode(WIFI_STA);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(\"Worker starting with MAC address \");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(WiFi.macAddress());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ledcSetup(ledChannel, freq, resolution);");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// attach the channel to the GPIO to be controlled");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("ledcAttachPin(ledPin, ledChannel);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(\"Initializing DHT sensor..\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("dht.begin();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(\"DHT initiated\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Init ESP-NOW");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (esp_now_init() != ESP_OK) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Serial.println(\"Error initializing ESP-NOW\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Once ESPNow is successfully Init, we will register for Send CB to");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// get the status of Trasnmitted packet");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_now_register_send_cb(OnDataSent);");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Register peer");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("memcpy(gatewayInfo.peer_addr, gatewayAddress, 6);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("gatewayInfo.channel = 0;  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("gatewayInfo.encrypt = false;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Add peer        ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (esp_now_add_peer(&gatewayInfo) != ESP_OK){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Serial.println(\"Failed to add peer\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Serial.println(\"Succesfully added peer\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Register for a callback function that will be called when data is received");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_now_register_recv_cb(OnDataRecv);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("typedef struct message_base {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("MESSAGE_TYPE type;");
    _builder.newLine();
    _builder.append("} message_base;");
    _builder.newLine();
    _builder.append("message_base baseMessage;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("typedef struct message_setting : message_base {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("int setting;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("float newValue;");
    _builder.newLine();
    _builder.append("} message_setting;");
    _builder.newLine();
    _builder.append("message_setting settingMessage;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("typedef struct message_sample : message_base {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("float temp;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("float hum;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("float moist;");
    _builder.newLine();
    _builder.append("} message_sample;");
    _builder.newLine();
    _builder.append("message_sample sampleMessage;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void loop() {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// put your main code here, to run repeatedly:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("int sampleDelay = 1.0 / sampleRate * 1000;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("delay(max(sampleDelay, 1000));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleSoil();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleDHT();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("check_actuators();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("send_message(gatewayAddress, (uint8_t *) &sampleMessage, sizeof(sampleMessage));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void sampleSoil(){");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("moisture = analogRead(soilPin);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(moisture);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleMessage.moist = moisture;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void sampleDHT () {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(\"Sampling..\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Reading temperature or humidity takes about 250 milliseconds!");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Sensor readings may also be up to 2 seconds \'old\' (its a very slow sensor)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("//humidity = dht.getHumidity();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Read temperature as Celsius (the default)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("temperature = dht.readTemperature();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("humidity = dht.readHumidity();");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Check if any reads failed and exit early (to try again).");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (isnan(humidity) && isnan(temperature)) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Serial.println(F(\"Failed to read from DHT sensor!\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleMessage.type = Sample;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleMessage.temp = temperature;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sampleMessage.hum = humidity;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Read moisture");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void check_actuators() {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (temperature > ledTemperatureThreshold) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ledcWrite(ledChannel, 255);    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ledcWrite(ledChannel, 0);    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if(pumpMoistureThreshold > moisture){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("digitalWrite(pumpPin, HIGH);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("digitalWrite(pumpPin, LOW);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(String(pumpMoistureThreshold) + \" > \" + String(moisture));");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(\"Last Packet Send Status:\\t\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("memcpy(&baseMessage, incomingData, sizeof(baseMessage));");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(\"Type \" + String(baseMessage.type) + \" \");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(\"message received: \");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(len);");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("switch (baseMessage.type) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case Ping:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("handle_ping(mac, incomingData, len);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("case Setting:");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("handle_setting(mac, incomingData, len);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("check_actuators();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void print_mac(const uint8_t * mac) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("String result = \"\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("for (int i = 0; i < 6; i++) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("uint8_t b = mac[i];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Serial.print(b, HEX);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (i != 6 - 1) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Serial.print(\":\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void handle_ping(const uint8_t * mac, const uint8_t *incomingData, int len) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.print(\"Ping recieved from \");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("print_mac(mac);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.println(\"\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("send_message(mac, incomingData, len);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void handle_setting(const uint8_t * mac, const uint8_t *incomingData, int len) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("memcpy(&settingMessage, incomingData, sizeof(settingMessage));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (settingMessage.setting == 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ledTemperatureThreshold = settingMessage.newValue;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (settingMessage.setting == 1) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pumpMoistureThreshold = settingMessage.newValue;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void send_message(const uint8_t * mac, const uint8_t *incomingData, int len) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esp_err_t result = esp_now_send(mac, incomingData, len);");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
}
