/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DeviceDefinitionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWifiKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWifiSsidAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWifiSsidSTRINGTerminalRuleCall_3_0 = (RuleCall)cWifiSsidAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cPasswordKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cWifiPasswordAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cWifiPasswordSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cWifiPasswordAssignment_4_2.eContents().get(0);
		private final Keyword cMqttKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMqttHostAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMqttHostSTRINGTerminalRuleCall_6_0 = (RuleCall)cMqttHostAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cUsernameKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMqttUsernameAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMqttUsernameSTRINGTerminalRuleCall_7_2_0 = (RuleCall)cMqttUsernameAssignment_7_2.eContents().get(0);
		private final Keyword cAndKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cPasswordKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cMqttPasswordAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cMqttPasswordSTRINGTerminalRuleCall_7_5_0 = (RuleCall)cMqttPasswordAssignment_7_5.eContents().get(0);
		private final Assignment cGatewayAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGatewayGatewayParserRuleCall_8_0 = (RuleCall)cGatewayAssignment_8.eContents().get(0);
		private final Assignment cGraphsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cGraphsGraphParserRuleCall_9_0 = (RuleCall)cGraphsAssignment_9.eContents().get(0);
		
		//System:
		//    'System' ':'
		//    'wifi' wifiSsid = STRING ('with' 'password' wifiPassword = STRING)?
		//    'mqtt' mqttHost = STRING ('with' 'username' mqttUsername = STRING 'and' 'password' mqttPassword = STRING)?
		//    gateway = Gateway
		//    graphs += Graph*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'System' ':'
		//'wifi' wifiSsid = STRING ('with' 'password' wifiPassword = STRING)?
		//'mqtt' mqttHost = STRING ('with' 'username' mqttUsername = STRING 'and' 'password' mqttPassword = STRING)?
		//gateway = Gateway
		//graphs += Graph*
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'wifi'
		public Keyword getWifiKeyword_2() { return cWifiKeyword_2; }
		
		//wifiSsid = STRING
		public Assignment getWifiSsidAssignment_3() { return cWifiSsidAssignment_3; }
		
		//STRING
		public RuleCall getWifiSsidSTRINGTerminalRuleCall_3_0() { return cWifiSsidSTRINGTerminalRuleCall_3_0; }
		
		//('with' 'password' wifiPassword = STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//'password'
		public Keyword getPasswordKeyword_4_1() { return cPasswordKeyword_4_1; }
		
		//wifiPassword = STRING
		public Assignment getWifiPasswordAssignment_4_2() { return cWifiPasswordAssignment_4_2; }
		
		//STRING
		public RuleCall getWifiPasswordSTRINGTerminalRuleCall_4_2_0() { return cWifiPasswordSTRINGTerminalRuleCall_4_2_0; }
		
		//'mqtt'
		public Keyword getMqttKeyword_5() { return cMqttKeyword_5; }
		
		//mqttHost = STRING
		public Assignment getMqttHostAssignment_6() { return cMqttHostAssignment_6; }
		
		//STRING
		public RuleCall getMqttHostSTRINGTerminalRuleCall_6_0() { return cMqttHostSTRINGTerminalRuleCall_6_0; }
		
		//('with' 'username' mqttUsername = STRING 'and' 'password' mqttPassword = STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'username'
		public Keyword getUsernameKeyword_7_1() { return cUsernameKeyword_7_1; }
		
		//mqttUsername = STRING
		public Assignment getMqttUsernameAssignment_7_2() { return cMqttUsernameAssignment_7_2; }
		
		//STRING
		public RuleCall getMqttUsernameSTRINGTerminalRuleCall_7_2_0() { return cMqttUsernameSTRINGTerminalRuleCall_7_2_0; }
		
		//'and'
		public Keyword getAndKeyword_7_3() { return cAndKeyword_7_3; }
		
		//'password'
		public Keyword getPasswordKeyword_7_4() { return cPasswordKeyword_7_4; }
		
		//mqttPassword = STRING
		public Assignment getMqttPasswordAssignment_7_5() { return cMqttPasswordAssignment_7_5; }
		
		//STRING
		public RuleCall getMqttPasswordSTRINGTerminalRuleCall_7_5_0() { return cMqttPasswordSTRINGTerminalRuleCall_7_5_0; }
		
		//gateway = Gateway
		public Assignment getGatewayAssignment_8() { return cGatewayAssignment_8; }
		
		//Gateway
		public RuleCall getGatewayGatewayParserRuleCall_8_0() { return cGatewayGatewayParserRuleCall_8_0; }
		
		//graphs += Graph*
		public Assignment getGraphsAssignment_9() { return cGraphsAssignment_9; }
		
		//Graph
		public RuleCall getGraphsGraphParserRuleCall_9_0() { return cGraphsGraphParserRuleCall_9_0; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCategoryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategorySTRINGTerminalRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cTitleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTitleSTRINGTerminalRuleCall_5_0 = (RuleCall)cTitleAssignment_5.eContents().get(0);
		private final Keyword cXKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cXlabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cXlabelSTRINGTerminalRuleCall_7_0 = (RuleCall)cXlabelAssignment_7.eContents().get(0);
		private final Keyword cYKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cYlabelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cYlabelSTRINGTerminalRuleCall_9_0 = (RuleCall)cYlabelAssignment_9.eContents().get(0);
		private final Assignment cLinesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cLinesGraphLineParserRuleCall_10_0 = (RuleCall)cLinesAssignment_10.eContents().get(0);
		
		//Graph:
		//    'Graph' ':'
		//    'category' category = STRING
		//    'title' title = STRING
		//    'x' xlabel = STRING
		//    'y' ylabel = STRING
		//    (lines += GraphLine)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Graph' ':'
		//'category' category = STRING
		//'title' title = STRING
		//'x' xlabel = STRING
		//'y' ylabel = STRING
		//(lines += GraphLine)+
		public Group getGroup() { return cGroup; }
		
		//'Graph'
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'category'
		public Keyword getCategoryKeyword_2() { return cCategoryKeyword_2; }
		
		//category = STRING
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }
		
		//STRING
		public RuleCall getCategorySTRINGTerminalRuleCall_3_0() { return cCategorySTRINGTerminalRuleCall_3_0; }
		
		//'title'
		public Keyword getTitleKeyword_4() { return cTitleKeyword_4; }
		
		//title = STRING
		public Assignment getTitleAssignment_5() { return cTitleAssignment_5; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_5_0() { return cTitleSTRINGTerminalRuleCall_5_0; }
		
		//'x'
		public Keyword getXKeyword_6() { return cXKeyword_6; }
		
		//xlabel = STRING
		public Assignment getXlabelAssignment_7() { return cXlabelAssignment_7; }
		
		//STRING
		public RuleCall getXlabelSTRINGTerminalRuleCall_7_0() { return cXlabelSTRINGTerminalRuleCall_7_0; }
		
		//'y'
		public Keyword getYKeyword_8() { return cYKeyword_8; }
		
		//ylabel = STRING
		public Assignment getYlabelAssignment_9() { return cYlabelAssignment_9; }
		
		//STRING
		public RuleCall getYlabelSTRINGTerminalRuleCall_9_0() { return cYlabelSTRINGTerminalRuleCall_9_0; }
		
		//(lines += GraphLine)+
		public Assignment getLinesAssignment_10() { return cLinesAssignment_10; }
		
		//GraphLine
		public RuleCall getLinesGraphLineParserRuleCall_10_0() { return cLinesGraphLineParserRuleCall_10_0; }
	}
	public class GraphLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.GraphLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputGraphVariableUseParserRuleCall_1_0 = (RuleCall)cOutputAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLegendKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLegendAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLegendSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLegendAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_3_1_0 = (RuleCall)cColorAssignment_3_1.eContents().get(0);
		
		//GraphLine:
		//    'line' output = GraphVariableUse
		//    ('legend' legend = STRING)?
		//    ('color' color = Color)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'line' output = GraphVariableUse
		//('legend' legend = STRING)?
		//('color' color = Color)?
		public Group getGroup() { return cGroup; }
		
		//'line'
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }
		
		//output = GraphVariableUse
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }
		
		//GraphVariableUse
		public RuleCall getOutputGraphVariableUseParserRuleCall_1_0() { return cOutputGraphVariableUseParserRuleCall_1_0; }
		
		//('legend' legend = STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'legend'
		public Keyword getLegendKeyword_2_0() { return cLegendKeyword_2_0; }
		
		//legend = STRING
		public Assignment getLegendAssignment_2_1() { return cLegendAssignment_2_1; }
		
		//STRING
		public RuleCall getLegendSTRINGTerminalRuleCall_2_1_0() { return cLegendSTRINGTerminalRuleCall_2_1_0; }
		
		//('color' color = Color)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'color'
		public Keyword getColorKeyword_3_0() { return cColorKeyword_3_0; }
		
		//color = Color
		public Assignment getColorAssignment_3_1() { return cColorAssignment_3_1; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_3_1_0() { return cColorColorParserRuleCall_3_1_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRGBAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRedAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRedDECIMALTerminalRuleCall_0_2_0 = (RuleCall)cRedAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cGreenAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cGreenDECIMALTerminalRuleCall_0_4_0 = (RuleCall)cGreenAssignment_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cBlueAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cBlueDECIMALTerminalRuleCall_0_6_0 = (RuleCall)cBlueAssignment_0_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPresetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPresetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPresetColorPresetEnumRuleCall_1_1_0 = (RuleCall)cPresetAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRandomAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRandomKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Color:
		//    {RGB} '(' red = DECIMAL ',' green = DECIMAL ',' blue = DECIMAL ')' |
		//    {Preset} preset = ColorPreset |
		//    {Random} 'random'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RGB} '(' red = DECIMAL ',' green = DECIMAL ',' blue = DECIMAL ')' |
		//{Preset} preset = ColorPreset |
		//{Random} 'random'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RGB} '(' red = DECIMAL ',' green = DECIMAL ',' blue = DECIMAL ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{RGB}
		public Action getRGBAction_0_0() { return cRGBAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//red = DECIMAL
		public Assignment getRedAssignment_0_2() { return cRedAssignment_0_2; }
		
		//DECIMAL
		public RuleCall getRedDECIMALTerminalRuleCall_0_2_0() { return cRedDECIMALTerminalRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//green = DECIMAL
		public Assignment getGreenAssignment_0_4() { return cGreenAssignment_0_4; }
		
		//DECIMAL
		public RuleCall getGreenDECIMALTerminalRuleCall_0_4_0() { return cGreenDECIMALTerminalRuleCall_0_4_0; }
		
		//','
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }
		
		//blue = DECIMAL
		public Assignment getBlueAssignment_0_6() { return cBlueAssignment_0_6; }
		
		//DECIMAL
		public RuleCall getBlueDECIMALTerminalRuleCall_0_6_0() { return cBlueDECIMALTerminalRuleCall_0_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }
		
		//{Preset} preset = ColorPreset
		public Group getGroup_1() { return cGroup_1; }
		
		//{Preset}
		public Action getPresetAction_1_0() { return cPresetAction_1_0; }
		
		//preset = ColorPreset
		public Assignment getPresetAssignment_1_1() { return cPresetAssignment_1_1; }
		
		//ColorPreset
		public RuleCall getPresetColorPresetEnumRuleCall_1_1_0() { return cPresetColorPresetEnumRuleCall_1_1_0; }
		
		//{Random} 'random'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Random}
		public Action getRandomAction_2_0() { return cRandomAction_2_0; }
		
		//'random'
		public Keyword getRandomKeyword_2_1() { return cRandomKeyword_2_1; }
	}
	public class GatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Gateway");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGatewayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMacKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMacAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMacMACTerminalRuleCall_4_0 = (RuleCall)cMacAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cErrorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLightKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cErrorLedAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cErrorLedINTTerminalRuleCall_5_2_0 = (RuleCall)cErrorLedAssignment_5_2.eContents().get(0);
		private final Assignment cWorkersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWorkersWorkerParserRuleCall_6_0 = (RuleCall)cWorkersAssignment_6.eContents().get(0);
		
		//Gateway:
		//    'Gateway' name=ID ':'
		//    'mac' mac = MAC
		//    ('error' 'light' errorLed += INT)?
		//    workers += Worker+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Gateway' name=ID ':'
		//'mac' mac = MAC
		//('error' 'light' errorLed += INT)?
		//workers += Worker+
		public Group getGroup() { return cGroup; }
		
		//'Gateway'
		public Keyword getGatewayKeyword_0() { return cGatewayKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'mac'
		public Keyword getMacKeyword_3() { return cMacKeyword_3; }
		
		//mac = MAC
		public Assignment getMacAssignment_4() { return cMacAssignment_4; }
		
		//MAC
		public RuleCall getMacMACTerminalRuleCall_4_0() { return cMacMACTerminalRuleCall_4_0; }
		
		//('error' 'light' errorLed += INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'error'
		public Keyword getErrorKeyword_5_0() { return cErrorKeyword_5_0; }
		
		//'light'
		public Keyword getLightKeyword_5_1() { return cLightKeyword_5_1; }
		
		//errorLed += INT
		public Assignment getErrorLedAssignment_5_2() { return cErrorLedAssignment_5_2; }
		
		//INT
		public RuleCall getErrorLedINTTerminalRuleCall_5_2_0() { return cErrorLedINTTerminalRuleCall_5_2_0; }
		
		//workers += Worker+
		public Assignment getWorkersAssignment_6() { return cWorkersAssignment_6; }
		
		//Worker
		public RuleCall getWorkersWorkerParserRuleCall_6_0() { return cWorkersWorkerParserRuleCall_6_0; }
	}
	public class WorkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Worker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMacKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMacAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMacMACTerminalRuleCall_4_0 = (RuleCall)cMacAssignment_4.eContents().get(0);
		private final Keyword cSleepKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cForKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSleepTimeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSleepTimeINTTerminalRuleCall_7_0 = (RuleCall)cSleepTimeAssignment_7.eContents().get(0);
		private final Assignment cTimeUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_8_0 = (RuleCall)cTimeUnitAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cErrorKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLightKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cErrorLedAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cErrorLedINTTerminalRuleCall_9_2_0 = (RuleCall)cErrorLedAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cRetriesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cRetriesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cRetriesINTTerminalRuleCall_10_1_0 = (RuleCall)cRetriesAssignment_10_1.eContents().get(0);
		private final Assignment cDevicesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDevicesDeviceParserRuleCall_11_0 = (RuleCall)cDevicesAssignment_11.eContents().get(0);
		
		//Worker:
		//    'Worker' (name=ID) ':'
		//    'mac' mac = MAC
		//    'sleep' 'for' sleepTime = INT timeUnit = TimeUnit
		//    ('error' 'light' errorLed += INT)?
		//    ('retries' retries += INT)?
		//    devices += Device*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Worker' (name=ID) ':'
		//'mac' mac = MAC
		//'sleep' 'for' sleepTime = INT timeUnit = TimeUnit
		//('error' 'light' errorLed += INT)?
		//('retries' retries += INT)?
		//devices += Device*
		public Group getGroup() { return cGroup; }
		
		//'Worker'
		public Keyword getWorkerKeyword_0() { return cWorkerKeyword_0; }
		
		//(name=ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'mac'
		public Keyword getMacKeyword_3() { return cMacKeyword_3; }
		
		//mac = MAC
		public Assignment getMacAssignment_4() { return cMacAssignment_4; }
		
		//MAC
		public RuleCall getMacMACTerminalRuleCall_4_0() { return cMacMACTerminalRuleCall_4_0; }
		
		//'sleep'
		public Keyword getSleepKeyword_5() { return cSleepKeyword_5; }
		
		//'for'
		public Keyword getForKeyword_6() { return cForKeyword_6; }
		
		//sleepTime = INT
		public Assignment getSleepTimeAssignment_7() { return cSleepTimeAssignment_7; }
		
		//INT
		public RuleCall getSleepTimeINTTerminalRuleCall_7_0() { return cSleepTimeINTTerminalRuleCall_7_0; }
		
		//timeUnit = TimeUnit
		public Assignment getTimeUnitAssignment_8() { return cTimeUnitAssignment_8; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_8_0() { return cTimeUnitTimeUnitParserRuleCall_8_0; }
		
		//('error' 'light' errorLed += INT)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'error'
		public Keyword getErrorKeyword_9_0() { return cErrorKeyword_9_0; }
		
		//'light'
		public Keyword getLightKeyword_9_1() { return cLightKeyword_9_1; }
		
		//errorLed += INT
		public Assignment getErrorLedAssignment_9_2() { return cErrorLedAssignment_9_2; }
		
		//INT
		public RuleCall getErrorLedINTTerminalRuleCall_9_2_0() { return cErrorLedINTTerminalRuleCall_9_2_0; }
		
		//('retries' retries += INT)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'retries'
		public Keyword getRetriesKeyword_10_0() { return cRetriesKeyword_10_0; }
		
		//retries += INT
		public Assignment getRetriesAssignment_10_1() { return cRetriesAssignment_10_1; }
		
		//INT
		public RuleCall getRetriesINTTerminalRuleCall_10_1_0() { return cRetriesINTTerminalRuleCall_10_1_0; }
		
		//devices += Device*
		public Assignment getDevicesAssignment_11() { return cDevicesAssignment_11; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_11_0() { return cDevicesDeviceParserRuleCall_11_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Device");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Device:
		//    Sensor | Actuator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPinsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_4_1_0 = (RuleCall)cPinsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cPinsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_4_2_1_0 = (RuleCall)cPinsAssignment_4_2_1.eContents().get(0);
		private final Assignment cOutputsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputsSensorOutputParserRuleCall_5_0 = (RuleCall)cOutputsAssignment_5.eContents().get(0);
		private final Assignment cSettingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSettingsSettingParserRuleCall_6_0 = (RuleCall)cSettingsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSampleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cIfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cPredicateAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cPredicateExpParserRuleCall_7_2_0 = (RuleCall)cPredicateAssignment_7_2.eContents().get(0);
		
		//Sensor:
		//    'Sensor' type = ID name=ID ':'
		//    ('pins' pins += Pin* (',' pins += Pin)*)?
		//    (outputs += SensorOutput)*
		//    (settings += Setting)*
		//    ('sample' 'if' predicate += Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' type = ID name=ID ':'
		//('pins' pins += Pin* (',' pins += Pin)*)?
		//(outputs += SensorOutput)*
		//(settings += Setting)*
		//('sample' 'if' predicate += Exp)?
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//type = ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('pins' pins += Pin* (',' pins += Pin)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'pins'
		public Keyword getPinsKeyword_4_0() { return cPinsKeyword_4_0; }
		
		//pins += Pin*
		public Assignment getPinsAssignment_4_1() { return cPinsAssignment_4_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_4_1_0() { return cPinsPinParserRuleCall_4_1_0; }
		
		//(',' pins += Pin)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//pins += Pin
		public Assignment getPinsAssignment_4_2_1() { return cPinsAssignment_4_2_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_4_2_1_0() { return cPinsPinParserRuleCall_4_2_1_0; }
		
		//(outputs += SensorOutput)*
		public Assignment getOutputsAssignment_5() { return cOutputsAssignment_5; }
		
		//SensorOutput
		public RuleCall getOutputsSensorOutputParserRuleCall_5_0() { return cOutputsSensorOutputParserRuleCall_5_0; }
		
		//(settings += Setting)*
		public Assignment getSettingsAssignment_6() { return cSettingsAssignment_6; }
		
		//Setting
		public RuleCall getSettingsSettingParserRuleCall_6_0() { return cSettingsSettingParserRuleCall_6_0; }
		
		//('sample' 'if' predicate += Exp)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'sample'
		public Keyword getSampleKeyword_7_0() { return cSampleKeyword_7_0; }
		
		//'if'
		public Keyword getIfKeyword_7_1() { return cIfKeyword_7_1; }
		
		//predicate += Exp
		public Assignment getPredicateAssignment_7_2() { return cPredicateAssignment_7_2; }
		
		//Exp
		public RuleCall getPredicateExpParserRuleCall_7_2_0() { return cPredicateExpParserRuleCall_7_2_0; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Pin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePinTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Pin:
		//    type = PinType number = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = PinType number = INT
		public Group getGroup() { return cGroup; }
		
		//type = PinType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PinType
		public RuleCall getTypePinTypeParserRuleCall_0_0() { return cTypePinTypeParserRuleCall_0_0; }
		
		//number = INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	public class PinTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.PinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cADCAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAdcKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDACAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDacKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGenericInAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cGenericOutAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cOutKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//PinType:
		//    {ADC} 'adc' | {DAC} 'dac' | {GenericIn} 'in' | {GenericOut} 'out'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ADC} 'adc' | {DAC} 'dac' | {GenericIn} 'in' | {GenericOut} 'out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ADC} 'adc'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ADC}
		public Action getADCAction_0_0() { return cADCAction_0_0; }
		
		//'adc'
		public Keyword getAdcKeyword_0_1() { return cAdcKeyword_0_1; }
		
		//{DAC} 'dac'
		public Group getGroup_1() { return cGroup_1; }
		
		//{DAC}
		public Action getDACAction_1_0() { return cDACAction_1_0; }
		
		//'dac'
		public Keyword getDacKeyword_1_1() { return cDacKeyword_1_1; }
		
		//{GenericIn} 'in'
		public Group getGroup_2() { return cGroup_2; }
		
		//{GenericIn}
		public Action getGenericInAction_2_0() { return cGenericInAction_2_0; }
		
		//'in'
		public Keyword getInKeyword_2_1() { return cInKeyword_2_1; }
		
		//{GenericOut} 'out'
		public Group getGroup_3() { return cGroup_3; }
		
		//{GenericOut}
		public Action getGenericOutAction_3_0() { return cGenericOutAction_3_0; }
		
		//'out'
		public Keyword getOutKeyword_3_1() { return cOutKeyword_3_1; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSecondAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cSecondKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cSecondsKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinuteAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cMinuteKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cMinutesKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cHourAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cHourKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cHoursKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//TimeUnit:
		//    {Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Second} ('second'|'seconds')
		public Group getGroup_0() { return cGroup_0; }
		
		//{Second}
		public Action getSecondAction_0_0() { return cSecondAction_0_0; }
		
		//('second'|'seconds')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'second'
		public Keyword getSecondKeyword_0_1_0() { return cSecondKeyword_0_1_0; }
		
		//'seconds'
		public Keyword getSecondsKeyword_0_1_1() { return cSecondsKeyword_0_1_1; }
		
		//{Minute} ('minute'|'minutes')
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minute}
		public Action getMinuteAction_1_0() { return cMinuteAction_1_0; }
		
		//('minute'|'minutes')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'minute'
		public Keyword getMinuteKeyword_1_1_0() { return cMinuteKeyword_1_1_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_1_1_1() { return cMinutesKeyword_1_1_1; }
		
		//{Hour} ('hour'|'hours')
		public Group getGroup_2() { return cGroup_2; }
		
		//{Hour}
		public Action getHourAction_2_0() { return cHourAction_2_0; }
		
		//('hour'|'hours')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'hour'
		public Keyword getHourKeyword_2_1_0() { return cHourKeyword_2_1_0; }
		
		//'hours'
		public Keyword getHoursKeyword_2_1_1() { return cHoursKeyword_2_1_1; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorOutputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSettingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Binding:
		//    SensorOutput | Setting
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SensorOutput | Setting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensorOutput
		public RuleCall getSensorOutputParserRuleCall_0() { return cSensorOutputParserRuleCall_0; }
		
		//Setting
		public RuleCall getSettingParserRuleCall_1() { return cSettingParserRuleCall_1; }
	}
	public class SensorOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.SensorOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutputSTRINGTerminalRuleCall_1_0 = (RuleCall)cOutputAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cMappingKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMappingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMappingExpParserRuleCall_4_2_0 = (RuleCall)cMappingAssignment_4_2.eContents().get(0);
		
		//SensorOutput:
		//    'out' (output=STRING)? 'as' name=ID ('with' 'mapping' mapping = Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' (output=STRING)? 'as' name=ID ('with' 'mapping' mapping = Exp)?
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//(output=STRING)?
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_1_0() { return cOutputSTRINGTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('with' 'mapping' mapping = Exp)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//'mapping'
		public Keyword getMappingKeyword_4_1() { return cMappingKeyword_4_1; }
		
		//mapping = Exp
		public Assignment getMappingAssignment_4_2() { return cMappingAssignment_4_2; }
		
		//Exp
		public RuleCall getMappingExpParserRuleCall_4_2_0() { return cMappingExpParserRuleCall_4_2_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPinsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinsPinParserRuleCall_5_0 = (RuleCall)cPinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_6_1_0 = (RuleCall)cPinsAssignment_6_1.eContents().get(0);
		private final Assignment cSettingsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSettingsSettingParserRuleCall_7_0 = (RuleCall)cSettingsAssignment_7.eContents().get(0);
		private final Assignment cTriggerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTriggerTriggerParserRuleCall_8_0 = (RuleCall)cTriggerAssignment_8.eContents().get(0);
		
		//Actuator:
		//    'Actuator' type = ID name=ID ':'
		//    'pins' pins += Pin* (',' pins += Pin)*
		//    settings += Setting*
		//    trigger = Trigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actuator' type = ID name=ID ':'
		//'pins' pins += Pin* (',' pins += Pin)*
		//settings += Setting*
		//trigger = Trigger
		public Group getGroup() { return cGroup; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//type = ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'pins'
		public Keyword getPinsKeyword_4() { return cPinsKeyword_4; }
		
		//pins += Pin*
		public Assignment getPinsAssignment_5() { return cPinsAssignment_5; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_5_0() { return cPinsPinParserRuleCall_5_0; }
		
		//(',' pins += Pin)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pins += Pin
		public Assignment getPinsAssignment_6_1() { return cPinsAssignment_6_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_6_1_0() { return cPinsPinParserRuleCall_6_1_0; }
		
		//settings += Setting*
		public Assignment getSettingsAssignment_7() { return cSettingsAssignment_7; }
		
		//Setting
		public RuleCall getSettingsSettingParserRuleCall_7_0() { return cSettingsSettingParserRuleCall_7_0; }
		
		//trigger = Trigger
		public Assignment getTriggerAssignment_8() { return cTriggerAssignment_8; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_8_0() { return cTriggerTriggerParserRuleCall_8_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Trigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWhenAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cWhenKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOnOffAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOnKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOnExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOnExpExpParserRuleCall_1_2_0 = (RuleCall)cOnExpAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Keyword cOffKeyword_1_3_0_0 = (Keyword)cGroup_1_3_0.eContents().get(0);
		private final Assignment cOffExpAssignment_1_3_0_1 = (Assignment)cGroup_1_3_0.eContents().get(1);
		private final RuleCall cOffExpExpParserRuleCall_1_3_0_1_0 = (RuleCall)cOffExpAssignment_1_3_0_1.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Keyword cRunKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Keyword cForKeyword_1_3_1_1 = (Keyword)cGroup_1_3_1.eContents().get(1);
		private final Assignment cTimeAssignment_1_3_1_2 = (Assignment)cGroup_1_3_1.eContents().get(2);
		private final RuleCall cTimeINTTerminalRuleCall_1_3_1_2_0 = (RuleCall)cTimeAssignment_1_3_1_2.eContents().get(0);
		private final Assignment cUnitAssignment_1_3_1_3 = (Assignment)cGroup_1_3_1.eContents().get(3);
		private final RuleCall cUnitTimeUnitParserRuleCall_1_3_1_3_0 = (RuleCall)cUnitAssignment_1_3_1_3.eContents().get(0);
		
		//Trigger:
		//    {When} 'when' exp = Exp
		//     | {OnOff} 'on' onExp = Exp (('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{When} 'when' exp = Exp
		// | {OnOff} 'on' onExp = Exp (('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{When} 'when' exp = Exp
		public Group getGroup_0() { return cGroup_0; }
		
		//{When}
		public Action getWhenAction_0_0() { return cWhenAction_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_0_1() { return cWhenKeyword_0_1; }
		
		//exp = Exp
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_0_2_0() { return cExpExpParserRuleCall_0_2_0; }
		
		//{OnOff} 'on' onExp = Exp (('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
		public Group getGroup_1() { return cGroup_1; }
		
		//{OnOff}
		public Action getOnOffAction_1_0() { return cOnOffAction_1_0; }
		
		//'on'
		public Keyword getOnKeyword_1_1() { return cOnKeyword_1_1; }
		
		//onExp = Exp
		public Assignment getOnExpAssignment_1_2() { return cOnExpAssignment_1_2; }
		
		//Exp
		public RuleCall getOnExpExpParserRuleCall_1_2_0() { return cOnExpExpParserRuleCall_1_2_0; }
		
		//(('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//('off' offExp = Exp)
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//'off'
		public Keyword getOffKeyword_1_3_0_0() { return cOffKeyword_1_3_0_0; }
		
		//offExp = Exp
		public Assignment getOffExpAssignment_1_3_0_1() { return cOffExpAssignment_1_3_0_1; }
		
		//Exp
		public RuleCall getOffExpExpParserRuleCall_1_3_0_1_0() { return cOffExpExpParserRuleCall_1_3_0_1_0; }
		
		//('run' 'for' time=INT unit=TimeUnit)
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//'run'
		public Keyword getRunKeyword_1_3_1_0() { return cRunKeyword_1_3_1_0; }
		
		//'for'
		public Keyword getForKeyword_1_3_1_1() { return cForKeyword_1_3_1_1; }
		
		//time=INT
		public Assignment getTimeAssignment_1_3_1_2() { return cTimeAssignment_1_3_1_2; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_3_1_2_0() { return cTimeINTTerminalRuleCall_1_3_1_2_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_1_3_1_3() { return cUnitAssignment_1_3_1_3; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_1_3_1_3_0() { return cUnitTimeUnitParserRuleCall_1_3_1_3_0; }
	}
	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Setting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSettingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePrimitiveParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Setting:
		//    'setting' name=ID '=' value=Primitive
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'setting' name=ID '=' value=Primitive
		public Group getGroup() { return cGroup; }
		
		//'setting'
		public Keyword getSettingKeyword_0() { return cSettingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Primitive
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Primitive
		public RuleCall getValuePrimitiveParserRuleCall_3_0() { return cValuePrimitiveParserRuleCall_3_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDecimalPrimitiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntPrimitiveAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTrueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTRUEKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanFalseAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFALSEKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Primitive:
		//    {DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DecimalPrimitive} value = DECIMAL
		public Group getGroup_0() { return cGroup_0; }
		
		//{DecimalPrimitive}
		public Action getDecimalPrimitiveAction_0_0() { return cDecimalPrimitiveAction_0_0; }
		
		//value = DECIMAL
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0_1_0() { return cValueDECIMALTerminalRuleCall_0_1_0; }
		
		//{IntPrimitive} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntPrimitive}
		public Action getIntPrimitiveAction_1_0() { return cIntPrimitiveAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{BooleanTrue} 'TRUE'
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanTrue}
		public Action getBooleanTrueAction_2_0() { return cBooleanTrueAction_2_0; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2_1() { return cTRUEKeyword_2_1; }
		
		//{BooleanFalse} 'FALSE'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanFalse}
		public Action getBooleanFalseAction_3_0() { return cBooleanFalseAction_3_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_3_1() { return cFALSEKeyword_3_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_1_0() { return cRightCompareParserRuleCall_1_1_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOrEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLesserLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareOrEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Compare returns Expression:
		//    CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		public Group getGroup() { return cGroup; }
		
		//CompareOrEquals
		public RuleCall getCompareOrEqualsParserRuleCall_0() { return cCompareOrEqualsParserRuleCall_0; }
		
		//(( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Greater.left=current} '>' | {Lesser.left=current}  '<' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Greater.left=current} '>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_0_0() { return cGreaterLeftAction_1_0_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_1() { return cGreaterThanSignKeyword_1_0_0_1; }
		
		//{Lesser.left=current}  '<'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Lesser.left=current}
		public Action getLesserLeftAction_1_0_1_0() { return cLesserLeftAction_1_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }
		
		//right=CompareOrEquals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CompareOrEquals
		public RuleCall getRightCompareOrEqualsParserRuleCall_1_1_0() { return cRightCompareOrEqualsParserRuleCall_1_1_0; }
	}
	public class CompareOrEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.CompareOrEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsOrNotEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterOrEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLesserOrEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsOrNotEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareOrEquals returns Expression:
		//    EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		public Group getGroup() { return cGroup; }
		
		//EqualsOrNotEquals
		public RuleCall getEqualsOrNotEqualsParserRuleCall_0() { return cEqualsOrNotEqualsParserRuleCall_0; }
		
		//(({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{GreaterOrEquals.left=current} '>='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{GreaterOrEquals.left=current}
		public Action getGreaterOrEqualsLeftAction_1_0_0_0() { return cGreaterOrEqualsLeftAction_1_0_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//{LesserOrEquals.left=current}  '<='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{LesserOrEquals.left=current}
		public Action getLesserOrEqualsLeftAction_1_0_1_0() { return cLesserOrEqualsLeftAction_1_0_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }
		
		//right=EqualsOrNotEquals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EqualsOrNotEquals
		public RuleCall getRightEqualsOrNotEqualsParserRuleCall_1_1_0() { return cRightEqualsOrNotEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsOrNotEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.EqualsOrNotEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNotEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndOrParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualsOrNotEquals returns Expression:
		//    AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		public Group getGroup() { return cGroup; }
		
		//AndOr
		public RuleCall getAndOrParserRuleCall_0() { return cAndOrParserRuleCall_0; }
		
		//(({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} '==' | {NotEquals.left=current}  '!=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equals.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_0() { return cEqualsLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{NotEquals.left=current}  '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{NotEquals.left=current}
		public Action getNotEqualsLeftAction_1_0_1_0() { return cNotEqualsLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=AndOr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndOr
		public RuleCall getRightAndOrParserRuleCall_1_1_0() { return cRightAndOrParserRuleCall_1_1_0; }
	}
	public class AndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.AndOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndOr returns Expression:
		//    Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({And.left=current} 'and' | {Or.left=current}  'or' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{And.left=current} 'and'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_1() { return cAndKeyword_1_0_0_1; }
		
		//{Or.left=current}  'or'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_0_1_1() { return cOrKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cValueKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Primary returns Expression:
		//     Primitive | Parenthesis | VariableUse | ExternalCall | {Value} 'value'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive | Parenthesis | VariableUse | ExternalCall | {Value} 'value'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
		
		//VariableUse
		public RuleCall getVariableUseParserRuleCall_2() { return cVariableUseParserRuleCall_2; }
		
		//ExternalCall
		public RuleCall getExternalCallParserRuleCall_3() { return cExternalCallParserRuleCall_3; }
		
		//{Value} 'value'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Value}
		public Action getValueAction_4_0() { return cValueAction_4_0; }
		
		//'value'
		public Keyword getValueKeyword_4_1() { return cValueKeyword_4_1; }
	}
	public class ExternalCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.ExternalCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncIDTerminalRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsExpParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgsExpParserRuleCall_4_1_0 = (RuleCall)cArgsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExternalCall:
		//    'call' func = ID '(' args += Exp? (',' args += Exp)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'call' func = ID '(' args += Exp? (',' args += Exp)* ')'
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//func = ID
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//ID
		public RuleCall getFuncIDTerminalRuleCall_1_0() { return cFuncIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args += Exp?
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_3_0() { return cArgsExpParserRuleCall_3_0; }
		
		//(',' args += Exp)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//args += Exp
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_4_1_0() { return cArgsExpParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InternalVariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.InternalVariableUse");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefBindingCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_0_1 = (RuleCall)cRefBindingCrossReference_0.eContents().get(1);
		
		//InternalVariableUse:
		//    ref = [Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref = [Binding]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_0() { return cRefBindingCrossReference_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_0_1() { return cRefBindingIDTerminalRuleCall_0_1; }
	}
	public class ExternalVariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.ExternalVariableUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjDeviceCrossReference_0_0 = (CrossReference)cObjAssignment_0.eContents().get(0);
		private final RuleCall cObjDeviceIDTerminalRuleCall_0_0_1 = (RuleCall)cObjDeviceCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefBindingCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_2_0_1 = (RuleCall)cRefBindingCrossReference_2_0.eContents().get(1);
		
		//ExternalVariableUse:
		//    obj = [Device] ('.'|'->') ref = [Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//obj = [Device] ('.'|'->') ref = [Binding]
		public Group getGroup() { return cGroup; }
		
		//obj = [Device]
		public Assignment getObjAssignment_0() { return cObjAssignment_0; }
		
		//[Device]
		public CrossReference getObjDeviceCrossReference_0_0() { return cObjDeviceCrossReference_0_0; }
		
		//ID
		public RuleCall getObjDeviceIDTerminalRuleCall_0_0_1() { return cObjDeviceIDTerminalRuleCall_0_0_1; }
		
		//('.'|'->')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//ref = [Binding]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_2_0() { return cRefBindingCrossReference_2_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_2_0_1() { return cRefBindingIDTerminalRuleCall_2_0_1; }
	}
	public class GraphVariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.GraphVariableUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWorkerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cWorkerWorkerCrossReference_0_0 = (CrossReference)cWorkerAssignment_0.eContents().get(0);
		private final RuleCall cWorkerWorkerIDTerminalRuleCall_0_0_1 = (RuleCall)cWorkerWorkerCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDeviceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeviceDeviceCrossReference_2_0 = (CrossReference)cDeviceAssignment_2.eContents().get(0);
		private final RuleCall cDeviceDeviceIDTerminalRuleCall_2_0_1 = (RuleCall)cDeviceDeviceCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefBindingCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_4_0_1 = (RuleCall)cRefBindingCrossReference_4_0.eContents().get(1);
		
		//GraphVariableUse:
		//    worker = [Worker] ('.'|'->') device = [Device] ('.'|'->') ref = [Binding]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//worker = [Worker] ('.'|'->') device = [Device] ('.'|'->') ref = [Binding]
		public Group getGroup() { return cGroup; }
		
		//worker = [Worker]
		public Assignment getWorkerAssignment_0() { return cWorkerAssignment_0; }
		
		//[Worker]
		public CrossReference getWorkerWorkerCrossReference_0_0() { return cWorkerWorkerCrossReference_0_0; }
		
		//ID
		public RuleCall getWorkerWorkerIDTerminalRuleCall_0_0_1() { return cWorkerWorkerIDTerminalRuleCall_0_0_1; }
		
		//('.'|'->')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//device = [Device]
		public Assignment getDeviceAssignment_2() { return cDeviceAssignment_2; }
		
		//[Device]
		public CrossReference getDeviceDeviceCrossReference_2_0() { return cDeviceDeviceCrossReference_2_0; }
		
		//ID
		public RuleCall getDeviceDeviceIDTerminalRuleCall_2_0_1() { return cDeviceDeviceIDTerminalRuleCall_2_0_1; }
		
		//('.'|'->')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//ref = [Binding]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_4_0() { return cRefBindingCrossReference_4_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_4_0_1() { return cRefBindingIDTerminalRuleCall_4_0_1; }
	}
	public class VariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.VariableUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInternalVariableUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalVariableUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGraphVariableUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableUse:
		//    InternalVariableUse | ExternalVariableUse | GraphVariableUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//InternalVariableUse | ExternalVariableUse | GraphVariableUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InternalVariableUse
		public RuleCall getInternalVariableUseParserRuleCall_0() { return cInternalVariableUseParserRuleCall_0; }
		
		//ExternalVariableUse
		public RuleCall getExternalVariableUseParserRuleCall_1() { return cExternalVariableUseParserRuleCall_1; }
		
		//GraphVariableUse
		public RuleCall getGraphVariableUseParserRuleCall_2() { return cGraphVariableUseParserRuleCall_2; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis:
		//    '(' exp=Exp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_0() { return cExpExpParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	public class ColorPresetElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.ColorPreset");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRedRedKeyword_0_0 = (Keyword)cRedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreenGreenKeyword_1_0 = (Keyword)cGreenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBlueBlueKeyword_2_0 = (Keyword)cBlueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cYellowEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cYellowYellowKeyword_3_0 = (Keyword)cYellowEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ColorPreset:
		//    Red='red' | Green='green' | Blue='blue' | Yellow='yellow'
		//;
		public EnumRule getRule() { return rule; }
		
		//Red='red' | Green='green' | Blue='blue' | Yellow='yellow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Red='red'
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_0() { return cRedEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getRedRedKeyword_0_0() { return cRedRedKeyword_0_0; }
		
		//Green='green'
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_1() { return cGreenEnumLiteralDeclaration_1; }
		
		//'green'
		public Keyword getGreenGreenKeyword_1_0() { return cGreenGreenKeyword_1_0; }
		
		//Blue='blue'
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_2() { return cBlueEnumLiteralDeclaration_2; }
		
		//'blue'
		public Keyword getBlueBlueKeyword_2_0() { return cBlueBlueKeyword_2_0; }
		
		//Yellow='yellow'
		public EnumLiteralDeclaration getYellowEnumLiteralDeclaration_3() { return cYellowEnumLiteralDeclaration_3; }
		
		//'yellow'
		public Keyword getYellowYellowKeyword_3_0() { return cYellowYellowKeyword_3_0; }
	}
	
	private final SystemElements pSystem;
	private final GraphElements pGraph;
	private final GraphLineElements pGraphLine;
	private final ColorElements pColor;
	private final ColorPresetElements eColorPreset;
	private final GatewayElements pGateway;
	private final WorkerElements pWorker;
	private final DeviceElements pDevice;
	private final SensorElements pSensor;
	private final PinElements pPin;
	private final PinTypeElements pPinType;
	private final TimeUnitElements pTimeUnit;
	private final TerminalRule tMAC;
	private final TerminalRule tHEXBYTE;
	private final BindingElements pBinding;
	private final SensorOutputElements pSensorOutput;
	private final ActuatorElements pActuator;
	private final TriggerElements pTrigger;
	private final SettingElements pSetting;
	private final TerminalRule tDECIMAL;
	private final PrimitiveElements pPrimitive;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final CompareElements pCompare;
	private final CompareOrEqualsElements pCompareOrEquals;
	private final EqualsOrNotEqualsElements pEqualsOrNotEquals;
	private final AndOrElements pAndOr;
	private final PrimaryElements pPrimary;
	private final ExternalCallElements pExternalCall;
	private final InternalVariableUseElements pInternalVariableUse;
	private final ExternalVariableUseElements pExternalVariableUse;
	private final GraphVariableUseElements pGraphVariableUse;
	private final VariableUseElements pVariableUse;
	private final ParenthesisElements pParenthesis;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeviceDefinitionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pGraph = new GraphElements();
		this.pGraphLine = new GraphLineElements();
		this.pColor = new ColorElements();
		this.eColorPreset = new ColorPresetElements();
		this.pGateway = new GatewayElements();
		this.pWorker = new WorkerElements();
		this.pDevice = new DeviceElements();
		this.pSensor = new SensorElements();
		this.pPin = new PinElements();
		this.pPinType = new PinTypeElements();
		this.pTimeUnit = new TimeUnitElements();
		this.tMAC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.MAC");
		this.tHEXBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.HEXBYTE");
		this.pBinding = new BindingElements();
		this.pSensorOutput = new SensorOutputElements();
		this.pActuator = new ActuatorElements();
		this.pTrigger = new TriggerElements();
		this.pSetting = new SettingElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.gms.dds.DeviceDefinition.DECIMAL");
		this.pPrimitive = new PrimitiveElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pCompare = new CompareElements();
		this.pCompareOrEquals = new CompareOrEqualsElements();
		this.pEqualsOrNotEquals = new EqualsOrNotEqualsElements();
		this.pAndOr = new AndOrElements();
		this.pPrimary = new PrimaryElements();
		this.pExternalCall = new ExternalCallElements();
		this.pInternalVariableUse = new InternalVariableUseElements();
		this.pExternalVariableUse = new ExternalVariableUseElements();
		this.pGraphVariableUse = new GraphVariableUseElements();
		this.pVariableUse = new VariableUseElements();
		this.pParenthesis = new ParenthesisElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.gms.dds.DeviceDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//    'System' ':'
	//    'wifi' wifiSsid = STRING ('with' 'password' wifiPassword = STRING)?
	//    'mqtt' mqttHost = STRING ('with' 'username' mqttUsername = STRING 'and' 'password' mqttPassword = STRING)?
	//    gateway = Gateway
	//    graphs += Graph*
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Graph:
	//    'Graph' ':'
	//    'category' category = STRING
	//    'title' title = STRING
	//    'x' xlabel = STRING
	//    'y' ylabel = STRING
	//    (lines += GraphLine)+
	//;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//GraphLine:
	//    'line' output = GraphVariableUse
	//    ('legend' legend = STRING)?
	//    ('color' color = Color)?
	//;
	public GraphLineElements getGraphLineAccess() {
		return pGraphLine;
	}
	
	public ParserRule getGraphLineRule() {
		return getGraphLineAccess().getRule();
	}
	
	//Color:
	//    {RGB} '(' red = DECIMAL ',' green = DECIMAL ',' blue = DECIMAL ')' |
	//    {Preset} preset = ColorPreset |
	//    {Random} 'random'
	//;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum ColorPreset:
	//    Red='red' | Green='green' | Blue='blue' | Yellow='yellow'
	//;
	public ColorPresetElements getColorPresetAccess() {
		return eColorPreset;
	}
	
	public EnumRule getColorPresetRule() {
		return getColorPresetAccess().getRule();
	}
	
	//Gateway:
	//    'Gateway' name=ID ':'
	//    'mac' mac = MAC
	//    ('error' 'light' errorLed += INT)?
	//    workers += Worker+
	//;
	public GatewayElements getGatewayAccess() {
		return pGateway;
	}
	
	public ParserRule getGatewayRule() {
		return getGatewayAccess().getRule();
	}
	
	//Worker:
	//    'Worker' (name=ID) ':'
	//    'mac' mac = MAC
	//    'sleep' 'for' sleepTime = INT timeUnit = TimeUnit
	//    ('error' 'light' errorLed += INT)?
	//    ('retries' retries += INT)?
	//    devices += Device*
	//;
	public WorkerElements getWorkerAccess() {
		return pWorker;
	}
	
	public ParserRule getWorkerRule() {
		return getWorkerAccess().getRule();
	}
	
	//Device:
	//    Sensor | Actuator
	//;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Sensor:
	//    'Sensor' type = ID name=ID ':'
	//    ('pins' pins += Pin* (',' pins += Pin)*)?
	//    (outputs += SensorOutput)*
	//    (settings += Setting)*
	//    ('sample' 'if' predicate += Exp)?
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Pin:
	//    type = PinType number = INT
	//;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//PinType:
	//    {ADC} 'adc' | {DAC} 'dac' | {GenericIn} 'in' | {GenericOut} 'out'
	//;
	public PinTypeElements getPinTypeAccess() {
		return pPinType;
	}
	
	public ParserRule getPinTypeRule() {
		return getPinTypeAccess().getRule();
	}
	
	//TimeUnit:
	//    {Second} ('second'|'seconds') | {Minute} ('minute'|'minutes') | {Hour} ('hour'|'hours')
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//terminal MAC:
	//    HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE
	//;
	public TerminalRule getMACRule() {
		return tMAC;
	}
	
	//terminal fragment HEXBYTE:
	//    ('0'..'9'|'A'..'F')('0'..'9'|'A'..'F')
	//;
	public TerminalRule getHEXBYTERule() {
		return tHEXBYTE;
	}
	
	//Binding:
	//    SensorOutput | Setting
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//SensorOutput:
	//    'out' (output=STRING)? 'as' name=ID ('with' 'mapping' mapping = Exp)?
	//;
	public SensorOutputElements getSensorOutputAccess() {
		return pSensorOutput;
	}
	
	public ParserRule getSensorOutputRule() {
		return getSensorOutputAccess().getRule();
	}
	
	//Actuator:
	//    'Actuator' type = ID name=ID ':'
	//    'pins' pins += Pin* (',' pins += Pin)*
	//    settings += Setting*
	//    trigger = Trigger
	//;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Trigger:
	//    {When} 'when' exp = Exp
	//     | {OnOff} 'on' onExp = Exp (('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Setting:
	//    'setting' name=ID '=' value=Primitive
	//;
	public SettingElements getSettingAccess() {
		return pSetting;
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}
	
	//terminal DECIMAL:
	//    '-'? INT ('.' INT)+
	//;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//Primitive:
	//    {DecimalPrimitive} value = DECIMAL | {IntPrimitive} value=INT | {BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE'
	//;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Compare returns Expression:
	//    CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
	//;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//CompareOrEquals returns Expression:
	//    EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
	//;
	public CompareOrEqualsElements getCompareOrEqualsAccess() {
		return pCompareOrEquals;
	}
	
	public ParserRule getCompareOrEqualsRule() {
		return getCompareOrEqualsAccess().getRule();
	}
	
	//EqualsOrNotEquals returns Expression:
	//    AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
	//;
	public EqualsOrNotEqualsElements getEqualsOrNotEqualsAccess() {
		return pEqualsOrNotEquals;
	}
	
	public ParserRule getEqualsOrNotEqualsRule() {
		return getEqualsOrNotEqualsAccess().getRule();
	}
	
	//AndOr returns Expression:
	//    Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
	//;
	public AndOrElements getAndOrAccess() {
		return pAndOr;
	}
	
	public ParserRule getAndOrRule() {
		return getAndOrAccess().getRule();
	}
	
	//Primary returns Expression:
	//     Primitive | Parenthesis | VariableUse | ExternalCall | {Value} 'value'
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//ExternalCall:
	//    'call' func = ID '(' args += Exp? (',' args += Exp)* ')'
	//;
	public ExternalCallElements getExternalCallAccess() {
		return pExternalCall;
	}
	
	public ParserRule getExternalCallRule() {
		return getExternalCallAccess().getRule();
	}
	
	//InternalVariableUse:
	//    ref = [Binding]
	//;
	public InternalVariableUseElements getInternalVariableUseAccess() {
		return pInternalVariableUse;
	}
	
	public ParserRule getInternalVariableUseRule() {
		return getInternalVariableUseAccess().getRule();
	}
	
	//ExternalVariableUse:
	//    obj = [Device] ('.'|'->') ref = [Binding]
	//;
	public ExternalVariableUseElements getExternalVariableUseAccess() {
		return pExternalVariableUse;
	}
	
	public ParserRule getExternalVariableUseRule() {
		return getExternalVariableUseAccess().getRule();
	}
	
	//GraphVariableUse:
	//    worker = [Worker] ('.'|'->') device = [Device] ('.'|'->') ref = [Binding]
	//;
	public GraphVariableUseElements getGraphVariableUseAccess() {
		return pGraphVariableUse;
	}
	
	public ParserRule getGraphVariableUseRule() {
		return getGraphVariableUseAccess().getRule();
	}
	
	//VariableUse:
	//    InternalVariableUse | ExternalVariableUse | GraphVariableUse
	//;
	public VariableUseElements getVariableUseAccess() {
		return pVariableUse;
	}
	
	public ParserRule getVariableUseRule() {
		return getVariableUseAccess().getRule();
	}
	
	//Parenthesis:
	//    '(' exp=Exp ')'
	//;
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
