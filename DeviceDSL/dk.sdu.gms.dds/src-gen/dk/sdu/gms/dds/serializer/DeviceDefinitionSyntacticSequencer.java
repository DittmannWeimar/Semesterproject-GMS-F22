/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.serializer;

import com.google.inject.Inject;
import dk.sdu.gms.dds.services.DeviceDefinitionGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DeviceDefinitionSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DeviceDefinitionGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1;
	protected AbstractElementAlias match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1;
	protected AbstractElementAlias match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1;
	protected AbstractElementAlias match_Sensor_PinsKeyword_4_0_q;
	protected AbstractElementAlias match_TimeUnit_HourKeyword_2_1_0_or_HoursKeyword_2_1_1;
	protected AbstractElementAlias match_TimeUnit_MinuteKeyword_1_1_0_or_MinutesKeyword_1_1_1;
	protected AbstractElementAlias match_TimeUnit_SecondKeyword_0_1_0_or_SecondsKeyword_0_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DeviceDefinitionGrammarAccess) access;
		match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExternalVariableUseAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getExternalVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_1_1()));
		match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_1_1()));
		match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getFullStopKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_3_1()));
		match_Sensor_PinsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getSensorAccess().getPinsKeyword_4_0());
		match_TimeUnit_HourKeyword_2_1_0_or_HoursKeyword_2_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getHourKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getHoursKeyword_2_1_1()));
		match_TimeUnit_MinuteKeyword_1_1_0_or_MinutesKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMinuteKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMinutesKeyword_1_1_1()));
		match_TimeUnit_SecondKeyword_0_1_0_or_SecondsKeyword_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getSecondKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getSecondsKeyword_0_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1.equals(syntax))
				emit_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1.equals(syntax))
				emit_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1.equals(syntax))
				emit_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sensor_PinsKeyword_4_0_q.equals(syntax))
				emit_Sensor_PinsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_HourKeyword_2_1_0_or_HoursKeyword_2_1_1.equals(syntax))
				emit_TimeUnit_HourKeyword_2_1_0_or_HoursKeyword_2_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_MinuteKeyword_1_1_0_or_MinutesKeyword_1_1_1.equals(syntax))
				emit_TimeUnit_MinuteKeyword_1_1_0_or_MinutesKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_SecondKeyword_0_1_0_or_SecondsKeyword_0_1_1.equals(syntax))
				emit_TimeUnit_SecondKeyword_0_1_0_or_SecondsKeyword_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '.' | '-&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     obj=[Device|ID] (ambiguity) ref=[Binding|ID]
	 
	 * </pre>
	 */
	protected void emit_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '.' | '-&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     worker=[Worker|ID] (ambiguity) device=[Device|ID]
	 
	 * </pre>
	 */
	protected void emit_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '.' | '-&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     device=[Device|ID] (ambiguity) ref=[Binding|ID]
	 
	 * </pre>
	 */
	protected void emit_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'pins'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) 'sample' 'if' predicate+=Exp
	 *     name=ID ':' (ambiguity) (rule end)
	 *     name=ID ':' (ambiguity) outputs+=SensorOutput
	 *     name=ID ':' (ambiguity) settings+=Setting
	 
	 * </pre>
	 */
	protected void emit_Sensor_PinsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'hour' | 'hours'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_TimeUnit_HourKeyword_2_1_0_or_HoursKeyword_2_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'minute' | 'minutes'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_TimeUnit_MinuteKeyword_1_1_0_or_MinutesKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'second' | 'seconds'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_TimeUnit_SecondKeyword_0_1_0_or_SecondsKeyword_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
