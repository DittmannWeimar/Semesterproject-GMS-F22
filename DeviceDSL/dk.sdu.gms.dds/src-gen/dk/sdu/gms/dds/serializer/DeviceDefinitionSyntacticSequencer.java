/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.gms.dds.serializer;

import com.google.inject.Inject;
import dk.sdu.gms.dds.services.DeviceDefinitionGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DeviceDefinitionSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DeviceDefinitionGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1;
	protected AbstractElementAlias match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1;
	protected AbstractElementAlias match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1;
	protected AbstractElementAlias match_Sensor_PinsKeyword_4_0_q;
	protected AbstractElementAlias match_TimeUnit_HKeyword_3_1_2_or_HourKeyword_3_1_0_or_HoursKeyword_3_1_1;
	protected AbstractElementAlias match_TimeUnit_MKeyword_2_1_2_or_MinuteKeyword_2_1_0_or_MinutesKeyword_2_1_1;
	protected AbstractElementAlias match_TimeUnit_MillisecondKeyword_0_1_0_or_MillisecondsKeyword_0_1_1_or_MsKeyword_0_1_2;
	protected AbstractElementAlias match_TimeUnit_SKeyword_1_1_2_or_SecondKeyword_1_1_0_or_SecondsKeyword_1_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DeviceDefinitionGrammarAccess) access;
		match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExternalVariableUseAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getExternalVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_1_1()));
		match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_1_1()));
		match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getFullStopKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getGraphVariableUseAccess().getHyphenMinusGreaterThanSignKeyword_3_1()));
		match_Sensor_PinsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getSensorAccess().getPinsKeyword_4_0());
		match_TimeUnit_HKeyword_3_1_2_or_HourKeyword_3_1_0_or_HoursKeyword_3_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getHKeyword_3_1_2()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getHourKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getHoursKeyword_3_1_1()));
		match_TimeUnit_MKeyword_2_1_2_or_MinuteKeyword_2_1_0_or_MinutesKeyword_2_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMKeyword_2_1_2()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMinuteKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMinutesKeyword_2_1_1()));
		match_TimeUnit_MillisecondKeyword_0_1_0_or_MillisecondsKeyword_0_1_1_or_MsKeyword_0_1_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMillisecondKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMillisecondsKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getMsKeyword_0_1_2()));
		match_TimeUnit_SKeyword_1_1_2_or_SecondKeyword_1_1_0_or_SecondsKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getSKeyword_1_1_2()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getSecondKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getTimeUnitAccess().getSecondsKeyword_1_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1.equals(syntax))
				emit_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1.equals(syntax))
				emit_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1.equals(syntax))
				emit_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sensor_PinsKeyword_4_0_q.equals(syntax))
				emit_Sensor_PinsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_HKeyword_3_1_2_or_HourKeyword_3_1_0_or_HoursKeyword_3_1_1.equals(syntax))
				emit_TimeUnit_HKeyword_3_1_2_or_HourKeyword_3_1_0_or_HoursKeyword_3_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_MKeyword_2_1_2_or_MinuteKeyword_2_1_0_or_MinutesKeyword_2_1_1.equals(syntax))
				emit_TimeUnit_MKeyword_2_1_2_or_MinuteKeyword_2_1_0_or_MinutesKeyword_2_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_MillisecondKeyword_0_1_0_or_MillisecondsKeyword_0_1_1_or_MsKeyword_0_1_2.equals(syntax))
				emit_TimeUnit_MillisecondKeyword_0_1_0_or_MillisecondsKeyword_0_1_1_or_MsKeyword_0_1_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeUnit_SKeyword_1_1_2_or_SecondKeyword_1_1_0_or_SecondsKeyword_1_1_1.equals(syntax))
				emit_TimeUnit_SKeyword_1_1_2_or_SecondKeyword_1_1_0_or_SecondsKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '.' | '->'
	 *
	 * This ambiguous syntax occurs at:
	 *     obj=[Device|ID] (ambiguity) ref=[Binding|ID]
	 */
	protected void emit_ExternalVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.' | '->'
	 *
	 * This ambiguous syntax occurs at:
	 *     worker=[Worker|ID] (ambiguity) device=[Device|ID]
	 */
	protected void emit_GraphVariableUse_FullStopKeyword_1_0_or_HyphenMinusGreaterThanSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.' | '->'
	 *
	 * This ambiguous syntax occurs at:
	 *     device=[Device|ID] (ambiguity) ref=[Binding|ID]
	 */
	protected void emit_GraphVariableUse_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'pins'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) 'sample' 'if' predicate+=Exp
	 *     name=ID ':' (ambiguity) (rule end)
	 *     name=ID ':' (ambiguity) outputs+=SensorOutput
	 *     name=ID ':' (ambiguity) settings+=Setting
	 */
	protected void emit_Sensor_PinsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'hour' | 'hours' | 'h'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TimeUnit_HKeyword_3_1_2_or_HourKeyword_3_1_0_or_HoursKeyword_3_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'minute' | 'minutes' | 'm'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TimeUnit_MKeyword_2_1_2_or_MinuteKeyword_2_1_0_or_MinutesKeyword_2_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'millisecond' | 'milliseconds' | 'ms'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TimeUnit_MillisecondKeyword_0_1_0_or_MillisecondsKeyword_0_1_1_or_MsKeyword_0_1_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'second' | 'seconds' | 's'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TimeUnit_SKeyword_1_1_2_or_SecondKeyword_1_1_0_or_SecondsKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
