/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.gms.dds.deviceDefinition.impl;

import dk.sdu.gms.dds.deviceDefinition.Device;
import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.GraphVariableUse;
import dk.sdu.gms.dds.deviceDefinition.Worker;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Graph Variable Use</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GraphVariableUseImpl#getWorker <em>Worker</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GraphVariableUseImpl#getDevice <em>Device</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GraphVariableUseImpl extends VariableUseImpl implements GraphVariableUse
{
  /**
   * The cached value of the '{@link #getWorker() <em>Worker</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorker()
   * @generated
   * @ordered
   */
  protected Worker worker;

  /**
   * The cached value of the '{@link #getDevice() <em>Device</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevice()
   * @generated
   * @ordered
   */
  protected Device device;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GraphVariableUseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeviceDefinitionPackage.Literals.GRAPH_VARIABLE_USE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Worker getWorker()
  {
    if (worker != null && worker.eIsProxy())
    {
      InternalEObject oldWorker = (InternalEObject)worker;
      worker = (Worker)eResolveProxy(oldWorker);
      if (worker != oldWorker)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER, oldWorker, worker));
      }
    }
    return worker;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Worker basicGetWorker()
  {
    return worker;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorker(Worker newWorker)
  {
    Worker oldWorker = worker;
    worker = newWorker;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER, oldWorker, worker));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Device getDevice()
  {
    if (device != null && device.eIsProxy())
    {
      InternalEObject oldDevice = (InternalEObject)device;
      device = (Device)eResolveProxy(oldDevice);
      if (device != oldDevice)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE, oldDevice, device));
      }
    }
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Device basicGetDevice()
  {
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDevice(Device newDevice)
  {
    Device oldDevice = device;
    device = newDevice;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE, oldDevice, device));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER:
        if (resolve) return getWorker();
        return basicGetWorker();
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE:
        if (resolve) return getDevice();
        return basicGetDevice();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER:
        setWorker((Worker)newValue);
        return;
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE:
        setDevice((Device)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER:
        setWorker((Worker)null);
        return;
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE:
        setDevice((Device)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__WORKER:
        return worker != null;
      case DeviceDefinitionPackage.GRAPH_VARIABLE_USE__DEVICE:
        return device != null;
    }
    return super.eIsSet(featureID);
  }

} //GraphVariableUseImpl
