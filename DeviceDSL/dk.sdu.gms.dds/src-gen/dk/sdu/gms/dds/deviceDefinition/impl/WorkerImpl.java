/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.deviceDefinition.impl;

import dk.sdu.gms.dds.deviceDefinition.Device;
import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.TimeUnit;
import dk.sdu.gms.dds.deviceDefinition.Worker;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Worker</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getName <em>Name</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getMac <em>Mac</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getSleepTime <em>Sleep Time</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getTimeUnit <em>Time Unit</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getBroadcastTime <em>Broadcast Time</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.WorkerImpl#getDevices <em>Devices</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkerImpl extends MinimalEObjectImpl.Container implements Worker
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMac() <em>Mac</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMac()
   * @generated
   * @ordered
   */
  protected static final String MAC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMac() <em>Mac</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMac()
   * @generated
   * @ordered
   */
  protected String mac = MAC_EDEFAULT;

  /**
   * The default value of the '{@link #getSleepTime() <em>Sleep Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSleepTime()
   * @generated
   * @ordered
   */
  protected static final int SLEEP_TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSleepTime() <em>Sleep Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSleepTime()
   * @generated
   * @ordered
   */
  protected int sleepTime = SLEEP_TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTimeUnit() <em>Time Unit</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeUnit()
   * @generated
   * @ordered
   */
  protected EList<TimeUnit> timeUnit;

  /**
   * The default value of the '{@link #getBroadcastTime() <em>Broadcast Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTime()
   * @generated
   * @ordered
   */
  protected static final int BROADCAST_TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getBroadcastTime() <em>Broadcast Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTime()
   * @generated
   * @ordered
   */
  protected int broadcastTime = BROADCAST_TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDevices() <em>Devices</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevices()
   * @generated
   * @ordered
   */
  protected EList<Device> devices;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeviceDefinitionPackage.Literals.WORKER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.WORKER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMac()
  {
    return mac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMac(String newMac)
  {
    String oldMac = mac;
    mac = newMac;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.WORKER__MAC, oldMac, mac));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getSleepTime()
  {
    return sleepTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSleepTime(int newSleepTime)
  {
    int oldSleepTime = sleepTime;
    sleepTime = newSleepTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.WORKER__SLEEP_TIME, oldSleepTime, sleepTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TimeUnit> getTimeUnit()
  {
    if (timeUnit == null)
    {
      timeUnit = new EObjectContainmentEList<TimeUnit>(TimeUnit.class, this, DeviceDefinitionPackage.WORKER__TIME_UNIT);
    }
    return timeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getBroadcastTime()
  {
    return broadcastTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastTime(int newBroadcastTime)
  {
    int oldBroadcastTime = broadcastTime;
    broadcastTime = newBroadcastTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.WORKER__BROADCAST_TIME, oldBroadcastTime, broadcastTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Device> getDevices()
  {
    if (devices == null)
    {
      devices = new EObjectContainmentEList<Device>(Device.class, this, DeviceDefinitionPackage.WORKER__DEVICES);
    }
    return devices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.WORKER__TIME_UNIT:
        return ((InternalEList<?>)getTimeUnit()).basicRemove(otherEnd, msgs);
      case DeviceDefinitionPackage.WORKER__DEVICES:
        return ((InternalEList<?>)getDevices()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.WORKER__NAME:
        return getName();
      case DeviceDefinitionPackage.WORKER__MAC:
        return getMac();
      case DeviceDefinitionPackage.WORKER__SLEEP_TIME:
        return getSleepTime();
      case DeviceDefinitionPackage.WORKER__TIME_UNIT:
        return getTimeUnit();
      case DeviceDefinitionPackage.WORKER__BROADCAST_TIME:
        return getBroadcastTime();
      case DeviceDefinitionPackage.WORKER__DEVICES:
        return getDevices();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.WORKER__NAME:
        setName((String)newValue);
        return;
      case DeviceDefinitionPackage.WORKER__MAC:
        setMac((String)newValue);
        return;
      case DeviceDefinitionPackage.WORKER__SLEEP_TIME:
        setSleepTime((Integer)newValue);
        return;
      case DeviceDefinitionPackage.WORKER__TIME_UNIT:
        getTimeUnit().clear();
        getTimeUnit().addAll((Collection<? extends TimeUnit>)newValue);
        return;
      case DeviceDefinitionPackage.WORKER__BROADCAST_TIME:
        setBroadcastTime((Integer)newValue);
        return;
      case DeviceDefinitionPackage.WORKER__DEVICES:
        getDevices().clear();
        getDevices().addAll((Collection<? extends Device>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.WORKER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.WORKER__MAC:
        setMac(MAC_EDEFAULT);
        return;
      case DeviceDefinitionPackage.WORKER__SLEEP_TIME:
        setSleepTime(SLEEP_TIME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.WORKER__TIME_UNIT:
        getTimeUnit().clear();
        return;
      case DeviceDefinitionPackage.WORKER__BROADCAST_TIME:
        setBroadcastTime(BROADCAST_TIME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.WORKER__DEVICES:
        getDevices().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.WORKER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DeviceDefinitionPackage.WORKER__MAC:
        return MAC_EDEFAULT == null ? mac != null : !MAC_EDEFAULT.equals(mac);
      case DeviceDefinitionPackage.WORKER__SLEEP_TIME:
        return sleepTime != SLEEP_TIME_EDEFAULT;
      case DeviceDefinitionPackage.WORKER__TIME_UNIT:
        return timeUnit != null && !timeUnit.isEmpty();
      case DeviceDefinitionPackage.WORKER__BROADCAST_TIME:
        return broadcastTime != BROADCAST_TIME_EDEFAULT;
      case DeviceDefinitionPackage.WORKER__DEVICES:
        return devices != null && !devices.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", mac: ");
    result.append(mac);
    result.append(", sleepTime: ");
    result.append(sleepTime);
    result.append(", broadcastTime: ");
    result.append(broadcastTime);
    result.append(')');
    return result.toString();
  }

} //WorkerImpl
