/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.deviceDefinition.impl;

import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.Expression;
import dk.sdu.gms.dds.deviceDefinition.OnOff;
import dk.sdu.gms.dds.deviceDefinition.TimeUnit;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>On Off</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.OnOffImpl#getOnExp <em>On Exp</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.OnOffImpl#getOffExp <em>Off Exp</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.OnOffImpl#getTime <em>Time</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.OnOffImpl#getUnit <em>Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OnOffImpl extends TriggerImpl implements OnOff
{
  /**
   * The cached value of the '{@link #getOnExp() <em>On Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnExp()
   * @generated
   * @ordered
   */
  protected Expression onExp;

  /**
   * The cached value of the '{@link #getOffExp() <em>Off Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffExp()
   * @generated
   * @ordered
   */
  protected Expression offExp;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final int TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected int time = TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected TimeUnit unit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OnOffImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeviceDefinitionPackage.Literals.ON_OFF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getOnExp()
  {
    return onExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOnExp(Expression newOnExp, NotificationChain msgs)
  {
    Expression oldOnExp = onExp;
    onExp = newOnExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__ON_EXP, oldOnExp, newOnExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnExp(Expression newOnExp)
  {
    if (newOnExp != onExp)
    {
      NotificationChain msgs = null;
      if (onExp != null)
        msgs = ((InternalEObject)onExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__ON_EXP, null, msgs);
      if (newOnExp != null)
        msgs = ((InternalEObject)newOnExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__ON_EXP, null, msgs);
      msgs = basicSetOnExp(newOnExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__ON_EXP, newOnExp, newOnExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getOffExp()
  {
    return offExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOffExp(Expression newOffExp, NotificationChain msgs)
  {
    Expression oldOffExp = offExp;
    offExp = newOffExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__OFF_EXP, oldOffExp, newOffExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOffExp(Expression newOffExp)
  {
    if (newOffExp != offExp)
    {
      NotificationChain msgs = null;
      if (offExp != null)
        msgs = ((InternalEObject)offExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__OFF_EXP, null, msgs);
      if (newOffExp != null)
        msgs = ((InternalEObject)newOffExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__OFF_EXP, null, msgs);
      msgs = basicSetOffExp(newOffExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__OFF_EXP, newOffExp, newOffExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(int newTime)
  {
    int oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeUnit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(TimeUnit newUnit, NotificationChain msgs)
  {
    TimeUnit oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(TimeUnit newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.ON_OFF__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.ON_OFF__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.ON_OFF__ON_EXP:
        return basicSetOnExp(null, msgs);
      case DeviceDefinitionPackage.ON_OFF__OFF_EXP:
        return basicSetOffExp(null, msgs);
      case DeviceDefinitionPackage.ON_OFF__UNIT:
        return basicSetUnit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.ON_OFF__ON_EXP:
        return getOnExp();
      case DeviceDefinitionPackage.ON_OFF__OFF_EXP:
        return getOffExp();
      case DeviceDefinitionPackage.ON_OFF__TIME:
        return getTime();
      case DeviceDefinitionPackage.ON_OFF__UNIT:
        return getUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.ON_OFF__ON_EXP:
        setOnExp((Expression)newValue);
        return;
      case DeviceDefinitionPackage.ON_OFF__OFF_EXP:
        setOffExp((Expression)newValue);
        return;
      case DeviceDefinitionPackage.ON_OFF__TIME:
        setTime((Integer)newValue);
        return;
      case DeviceDefinitionPackage.ON_OFF__UNIT:
        setUnit((TimeUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.ON_OFF__ON_EXP:
        setOnExp((Expression)null);
        return;
      case DeviceDefinitionPackage.ON_OFF__OFF_EXP:
        setOffExp((Expression)null);
        return;
      case DeviceDefinitionPackage.ON_OFF__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.ON_OFF__UNIT:
        setUnit((TimeUnit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.ON_OFF__ON_EXP:
        return onExp != null;
      case DeviceDefinitionPackage.ON_OFF__OFF_EXP:
        return offExp != null;
      case DeviceDefinitionPackage.ON_OFF__TIME:
        return time != TIME_EDEFAULT;
      case DeviceDefinitionPackage.ON_OFF__UNIT:
        return unit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //OnOffImpl
