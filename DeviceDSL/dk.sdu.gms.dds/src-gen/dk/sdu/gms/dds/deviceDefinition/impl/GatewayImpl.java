/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.deviceDefinition.impl;

import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.Gateway;
import dk.sdu.gms.dds.deviceDefinition.NumberPrimitive;
import dk.sdu.gms.dds.deviceDefinition.TimeUnit;
import dk.sdu.gms.dds.deviceDefinition.Worker;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gateway</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getName <em>Name</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getMac <em>Mac</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getChannel <em>Channel</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getErrorLed <em>Error Led</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getRetries <em>Retries</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getDelay <em>Delay</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getDelayTimeUnit <em>Delay Time Unit</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.GatewayImpl#getWorkers <em>Workers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GatewayImpl extends MinimalEObjectImpl.Container implements Gateway
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMac() <em>Mac</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMac()
   * @generated
   * @ordered
   */
  protected static final String MAC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMac() <em>Mac</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMac()
   * @generated
   * @ordered
   */
  protected String mac = MAC_EDEFAULT;

  /**
   * The default value of the '{@link #getChannel() <em>Channel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannel()
   * @generated
   * @ordered
   */
  protected static final int CHANNEL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getChannel() <em>Channel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChannel()
   * @generated
   * @ordered
   */
  protected int channel = CHANNEL_EDEFAULT;

  /**
   * The cached value of the '{@link #getErrorLed() <em>Error Led</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorLed()
   * @generated
   * @ordered
   */
  protected EList<Integer> errorLed;

  /**
   * The cached value of the '{@link #getRetries() <em>Retries</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRetries()
   * @generated
   * @ordered
   */
  protected EList<Integer> retries;

  /**
   * The cached value of the '{@link #getDelay() <em>Delay</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelay()
   * @generated
   * @ordered
   */
  protected EList<NumberPrimitive> delay;

  /**
   * The cached value of the '{@link #getDelayTimeUnit() <em>Delay Time Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelayTimeUnit()
   * @generated
   * @ordered
   */
  protected TimeUnit delayTimeUnit;

  /**
   * The cached value of the '{@link #getWorkers() <em>Workers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkers()
   * @generated
   * @ordered
   */
  protected EList<Worker> workers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GatewayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeviceDefinitionPackage.Literals.GATEWAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GATEWAY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMac()
  {
    return mac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMac(String newMac)
  {
    String oldMac = mac;
    mac = newMac;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GATEWAY__MAC, oldMac, mac));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getChannel()
  {
    return channel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChannel(int newChannel)
  {
    int oldChannel = channel;
    channel = newChannel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GATEWAY__CHANNEL, oldChannel, channel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Integer> getErrorLed()
  {
    if (errorLed == null)
    {
      errorLed = new EDataTypeEList<Integer>(Integer.class, this, DeviceDefinitionPackage.GATEWAY__ERROR_LED);
    }
    return errorLed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Integer> getRetries()
  {
    if (retries == null)
    {
      retries = new EDataTypeEList<Integer>(Integer.class, this, DeviceDefinitionPackage.GATEWAY__RETRIES);
    }
    return retries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NumberPrimitive> getDelay()
  {
    if (delay == null)
    {
      delay = new EObjectContainmentEList<NumberPrimitive>(NumberPrimitive.class, this, DeviceDefinitionPackage.GATEWAY__DELAY);
    }
    return delay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeUnit getDelayTimeUnit()
  {
    return delayTimeUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelayTimeUnit(TimeUnit newDelayTimeUnit, NotificationChain msgs)
  {
    TimeUnit oldDelayTimeUnit = delayTimeUnit;
    delayTimeUnit = newDelayTimeUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT, oldDelayTimeUnit, newDelayTimeUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelayTimeUnit(TimeUnit newDelayTimeUnit)
  {
    if (newDelayTimeUnit != delayTimeUnit)
    {
      NotificationChain msgs = null;
      if (delayTimeUnit != null)
        msgs = ((InternalEObject)delayTimeUnit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT, null, msgs);
      if (newDelayTimeUnit != null)
        msgs = ((InternalEObject)newDelayTimeUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT, null, msgs);
      msgs = basicSetDelayTimeUnit(newDelayTimeUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT, newDelayTimeUnit, newDelayTimeUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Worker> getWorkers()
  {
    if (workers == null)
    {
      workers = new EObjectContainmentEList<Worker>(Worker.class, this, DeviceDefinitionPackage.GATEWAY__WORKERS);
    }
    return workers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GATEWAY__DELAY:
        return ((InternalEList<?>)getDelay()).basicRemove(otherEnd, msgs);
      case DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT:
        return basicSetDelayTimeUnit(null, msgs);
      case DeviceDefinitionPackage.GATEWAY__WORKERS:
        return ((InternalEList<?>)getWorkers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GATEWAY__NAME:
        return getName();
      case DeviceDefinitionPackage.GATEWAY__MAC:
        return getMac();
      case DeviceDefinitionPackage.GATEWAY__CHANNEL:
        return getChannel();
      case DeviceDefinitionPackage.GATEWAY__ERROR_LED:
        return getErrorLed();
      case DeviceDefinitionPackage.GATEWAY__RETRIES:
        return getRetries();
      case DeviceDefinitionPackage.GATEWAY__DELAY:
        return getDelay();
      case DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT:
        return getDelayTimeUnit();
      case DeviceDefinitionPackage.GATEWAY__WORKERS:
        return getWorkers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GATEWAY__NAME:
        setName((String)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__MAC:
        setMac((String)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__CHANNEL:
        setChannel((Integer)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__ERROR_LED:
        getErrorLed().clear();
        getErrorLed().addAll((Collection<? extends Integer>)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__RETRIES:
        getRetries().clear();
        getRetries().addAll((Collection<? extends Integer>)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__DELAY:
        getDelay().clear();
        getDelay().addAll((Collection<? extends NumberPrimitive>)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT:
        setDelayTimeUnit((TimeUnit)newValue);
        return;
      case DeviceDefinitionPackage.GATEWAY__WORKERS:
        getWorkers().clear();
        getWorkers().addAll((Collection<? extends Worker>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GATEWAY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.GATEWAY__MAC:
        setMac(MAC_EDEFAULT);
        return;
      case DeviceDefinitionPackage.GATEWAY__CHANNEL:
        setChannel(CHANNEL_EDEFAULT);
        return;
      case DeviceDefinitionPackage.GATEWAY__ERROR_LED:
        getErrorLed().clear();
        return;
      case DeviceDefinitionPackage.GATEWAY__RETRIES:
        getRetries().clear();
        return;
      case DeviceDefinitionPackage.GATEWAY__DELAY:
        getDelay().clear();
        return;
      case DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT:
        setDelayTimeUnit((TimeUnit)null);
        return;
      case DeviceDefinitionPackage.GATEWAY__WORKERS:
        getWorkers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.GATEWAY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DeviceDefinitionPackage.GATEWAY__MAC:
        return MAC_EDEFAULT == null ? mac != null : !MAC_EDEFAULT.equals(mac);
      case DeviceDefinitionPackage.GATEWAY__CHANNEL:
        return channel != CHANNEL_EDEFAULT;
      case DeviceDefinitionPackage.GATEWAY__ERROR_LED:
        return errorLed != null && !errorLed.isEmpty();
      case DeviceDefinitionPackage.GATEWAY__RETRIES:
        return retries != null && !retries.isEmpty();
      case DeviceDefinitionPackage.GATEWAY__DELAY:
        return delay != null && !delay.isEmpty();
      case DeviceDefinitionPackage.GATEWAY__DELAY_TIME_UNIT:
        return delayTimeUnit != null;
      case DeviceDefinitionPackage.GATEWAY__WORKERS:
        return workers != null && !workers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", mac: ");
    result.append(mac);
    result.append(", channel: ");
    result.append(channel);
    result.append(", errorLed: ");
    result.append(errorLed);
    result.append(", retries: ");
    result.append(retries);
    result.append(')');
    return result.toString();
  }

} //GatewayImpl
