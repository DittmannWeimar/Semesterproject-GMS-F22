/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.deviceDefinition.impl;

import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage;
import dk.sdu.gms.dds.deviceDefinition.Gateway;
import dk.sdu.gms.dds.deviceDefinition.Graph;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getWifiSsid <em>Wifi Ssid</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getWifiPassword <em>Wifi Password</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getMqttHost <em>Mqtt Host</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getMqttUsername <em>Mqtt Username</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getMqttPassword <em>Mqtt Password</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getGateway <em>Gateway</em>}</li>
 *   <li>{@link dk.sdu.gms.dds.deviceDefinition.impl.SystemImpl#getGraphs <em>Graphs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemImpl extends MinimalEObjectImpl.Container implements dk.sdu.gms.dds.deviceDefinition.System
{
  /**
   * The default value of the '{@link #getWifiSsid() <em>Wifi Ssid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWifiSsid()
   * @generated
   * @ordered
   */
  protected static final String WIFI_SSID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWifiSsid() <em>Wifi Ssid</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWifiSsid()
   * @generated
   * @ordered
   */
  protected String wifiSsid = WIFI_SSID_EDEFAULT;

  /**
   * The default value of the '{@link #getWifiPassword() <em>Wifi Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWifiPassword()
   * @generated
   * @ordered
   */
  protected static final String WIFI_PASSWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWifiPassword() <em>Wifi Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWifiPassword()
   * @generated
   * @ordered
   */
  protected String wifiPassword = WIFI_PASSWORD_EDEFAULT;

  /**
   * The default value of the '{@link #getMqttHost() <em>Mqtt Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttHost()
   * @generated
   * @ordered
   */
  protected static final String MQTT_HOST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMqttHost() <em>Mqtt Host</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttHost()
   * @generated
   * @ordered
   */
  protected String mqttHost = MQTT_HOST_EDEFAULT;

  /**
   * The default value of the '{@link #getMqttUsername() <em>Mqtt Username</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttUsername()
   * @generated
   * @ordered
   */
  protected static final String MQTT_USERNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMqttUsername() <em>Mqtt Username</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttUsername()
   * @generated
   * @ordered
   */
  protected String mqttUsername = MQTT_USERNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMqttPassword() <em>Mqtt Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttPassword()
   * @generated
   * @ordered
   */
  protected static final String MQTT_PASSWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMqttPassword() <em>Mqtt Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqttPassword()
   * @generated
   * @ordered
   */
  protected String mqttPassword = MQTT_PASSWORD_EDEFAULT;

  /**
   * The cached value of the '{@link #getGateway() <em>Gateway</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateway()
   * @generated
   * @ordered
   */
  protected Gateway gateway;

  /**
   * The cached value of the '{@link #getGraphs() <em>Graphs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGraphs()
   * @generated
   * @ordered
   */
  protected EList<Graph> graphs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeviceDefinitionPackage.Literals.SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWifiSsid()
  {
    return wifiSsid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWifiSsid(String newWifiSsid)
  {
    String oldWifiSsid = wifiSsid;
    wifiSsid = newWifiSsid;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__WIFI_SSID, oldWifiSsid, wifiSsid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWifiPassword()
  {
    return wifiPassword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWifiPassword(String newWifiPassword)
  {
    String oldWifiPassword = wifiPassword;
    wifiPassword = newWifiPassword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__WIFI_PASSWORD, oldWifiPassword, wifiPassword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMqttHost()
  {
    return mqttHost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMqttHost(String newMqttHost)
  {
    String oldMqttHost = mqttHost;
    mqttHost = newMqttHost;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__MQTT_HOST, oldMqttHost, mqttHost));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMqttUsername()
  {
    return mqttUsername;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMqttUsername(String newMqttUsername)
  {
    String oldMqttUsername = mqttUsername;
    mqttUsername = newMqttUsername;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__MQTT_USERNAME, oldMqttUsername, mqttUsername));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMqttPassword()
  {
    return mqttPassword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMqttPassword(String newMqttPassword)
  {
    String oldMqttPassword = mqttPassword;
    mqttPassword = newMqttPassword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__MQTT_PASSWORD, oldMqttPassword, mqttPassword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gateway getGateway()
  {
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGateway(Gateway newGateway, NotificationChain msgs)
  {
    Gateway oldGateway = gateway;
    gateway = newGateway;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__GATEWAY, oldGateway, newGateway);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateway(Gateway newGateway)
  {
    if (newGateway != gateway)
    {
      NotificationChain msgs = null;
      if (gateway != null)
        msgs = ((InternalEObject)gateway).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.SYSTEM__GATEWAY, null, msgs);
      if (newGateway != null)
        msgs = ((InternalEObject)newGateway).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeviceDefinitionPackage.SYSTEM__GATEWAY, null, msgs);
      msgs = basicSetGateway(newGateway, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeviceDefinitionPackage.SYSTEM__GATEWAY, newGateway, newGateway));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Graph> getGraphs()
  {
    if (graphs == null)
    {
      graphs = new EObjectContainmentEList<Graph>(Graph.class, this, DeviceDefinitionPackage.SYSTEM__GRAPHS);
    }
    return graphs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.SYSTEM__GATEWAY:
        return basicSetGateway(null, msgs);
      case DeviceDefinitionPackage.SYSTEM__GRAPHS:
        return ((InternalEList<?>)getGraphs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.SYSTEM__WIFI_SSID:
        return getWifiSsid();
      case DeviceDefinitionPackage.SYSTEM__WIFI_PASSWORD:
        return getWifiPassword();
      case DeviceDefinitionPackage.SYSTEM__MQTT_HOST:
        return getMqttHost();
      case DeviceDefinitionPackage.SYSTEM__MQTT_USERNAME:
        return getMqttUsername();
      case DeviceDefinitionPackage.SYSTEM__MQTT_PASSWORD:
        return getMqttPassword();
      case DeviceDefinitionPackage.SYSTEM__GATEWAY:
        return getGateway();
      case DeviceDefinitionPackage.SYSTEM__GRAPHS:
        return getGraphs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.SYSTEM__WIFI_SSID:
        setWifiSsid((String)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__WIFI_PASSWORD:
        setWifiPassword((String)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_HOST:
        setMqttHost((String)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_USERNAME:
        setMqttUsername((String)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_PASSWORD:
        setMqttPassword((String)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__GATEWAY:
        setGateway((Gateway)newValue);
        return;
      case DeviceDefinitionPackage.SYSTEM__GRAPHS:
        getGraphs().clear();
        getGraphs().addAll((Collection<? extends Graph>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.SYSTEM__WIFI_SSID:
        setWifiSsid(WIFI_SSID_EDEFAULT);
        return;
      case DeviceDefinitionPackage.SYSTEM__WIFI_PASSWORD:
        setWifiPassword(WIFI_PASSWORD_EDEFAULT);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_HOST:
        setMqttHost(MQTT_HOST_EDEFAULT);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_USERNAME:
        setMqttUsername(MQTT_USERNAME_EDEFAULT);
        return;
      case DeviceDefinitionPackage.SYSTEM__MQTT_PASSWORD:
        setMqttPassword(MQTT_PASSWORD_EDEFAULT);
        return;
      case DeviceDefinitionPackage.SYSTEM__GATEWAY:
        setGateway((Gateway)null);
        return;
      case DeviceDefinitionPackage.SYSTEM__GRAPHS:
        getGraphs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeviceDefinitionPackage.SYSTEM__WIFI_SSID:
        return WIFI_SSID_EDEFAULT == null ? wifiSsid != null : !WIFI_SSID_EDEFAULT.equals(wifiSsid);
      case DeviceDefinitionPackage.SYSTEM__WIFI_PASSWORD:
        return WIFI_PASSWORD_EDEFAULT == null ? wifiPassword != null : !WIFI_PASSWORD_EDEFAULT.equals(wifiPassword);
      case DeviceDefinitionPackage.SYSTEM__MQTT_HOST:
        return MQTT_HOST_EDEFAULT == null ? mqttHost != null : !MQTT_HOST_EDEFAULT.equals(mqttHost);
      case DeviceDefinitionPackage.SYSTEM__MQTT_USERNAME:
        return MQTT_USERNAME_EDEFAULT == null ? mqttUsername != null : !MQTT_USERNAME_EDEFAULT.equals(mqttUsername);
      case DeviceDefinitionPackage.SYSTEM__MQTT_PASSWORD:
        return MQTT_PASSWORD_EDEFAULT == null ? mqttPassword != null : !MQTT_PASSWORD_EDEFAULT.equals(mqttPassword);
      case DeviceDefinitionPackage.SYSTEM__GATEWAY:
        return gateway != null;
      case DeviceDefinitionPackage.SYSTEM__GRAPHS:
        return graphs != null && !graphs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (wifiSsid: ");
    result.append(wifiSsid);
    result.append(", wifiPassword: ");
    result.append(wifiPassword);
    result.append(", mqttHost: ");
    result.append(mqttHost);
    result.append(", mqttUsername: ");
    result.append(mqttUsername);
    result.append(", mqttPassword: ");
    result.append(mqttPassword);
    result.append(')');
    return result.toString();
  }

} //SystemImpl
