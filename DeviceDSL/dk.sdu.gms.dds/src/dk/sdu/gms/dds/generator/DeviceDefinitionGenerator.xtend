/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DeviceDefinitionGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val system = resource.allContents.filter(dk.sdu.gms.dds.deviceDefinition.System).next();
		
		val common = CommonGenerator.common;
		
		// Generate gateway
		val gatewayNetworking = GatewayGenerator.generateNetworking(system.gateway)
		
		fsa.generateFile('common.ino', common)
		fsa.generateFile('gateway.ino', gatewayNetworking)
		
		for (worker : system.gateway.workers) {
			val functionality = WorkerGenerator.generateFunctionality(worker);
			val networking = WorkerGenerator.generateNetworking(worker);
			
			fsa.generateFile(worker.mac + '/common.ino', common)
			fsa.generateFile(worker.mac + '/functionality.ino', functionality)
			fsa.generateFile(worker.mac + '/networking.ino', networking)
		}
	}
}
