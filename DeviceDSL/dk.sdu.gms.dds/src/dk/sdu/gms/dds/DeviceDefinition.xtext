grammar dk.sdu.gms.dds.DeviceDefinition with org.eclipse.xtext.common.Terminals

generate deviceDefinition "http://www.sdu.dk/gms/dds/DeviceDefinition"

System:
	'System' name=ID ':'
	'wifi' wifiSsid = STRING ('with' 'password' wifiPassword = STRING)?
	'mqtt' mqttHost = STRING ('with' 'username' mqttUsername = STRING 'and' 'password' mqttPassword = STRING)?
	gateway = Gateway
	graphs += Graph*
;

Graph:
	'Graph' ':'
	'category' category = STRING
	'title' title = STRING
	'x' xlabel = STRING
	'y' ylabel = STRING
	(lines += GraphLine)+
;

GraphLine:
	'line' output = GraphVariableUse
	('legend' legend = STRING)?
	('color' color = Color)?
;

Color:
	{RGB} '(' red = DECIMAL ',' green = DECIMAL ',' blue = DECIMAL ')' |
	{Preset} preset = ColorPreset |
	{Random} 'random'
;

enum ColorPreset:
	Red='red' | Green='green' | Blue='blue' | Yellow='yellow'
;
	
Gateway:
	'Gateway' name=ID ':'
	'mac' mac += MAC (',' mac += MAC)*
	'channel' channel = INT
	('error' 'light' errorLed += INT)?
	('retries' retries += INT 'with' 'delay' delay += NumberPrimitive delayTimeUnit = TimeUnit)?
	workers += Worker+
;

Worker:
	'Worker' (name=ID) ':'
	'mac' mac = MAC
	('preferred gateway' preferred=INT)?
	'sleep' 'for' sleepTime = NumberPrimitive timeUnit = TimeUnit
	('error' 'light' errorLed += INT)?
	('retries' retries += INT 'with' 'delay' delay += NumberPrimitive delayTimeUnit = TimeUnit)?
	devices += Device*
;

Device:
	Sensor | Actuator
;

Sensor:
	'Sensor' type = ID name=ID ':'
	('pins' pins += Pin* (',' pins += Pin)*)?
	(outputs += SensorOutput)*
	(settings += Setting)*
	('sample' 'if' predicate += Exp)?
;

Pin:
	type = PinType number = INT
;

PinType:
	{ADC} 'adc' | {DAC} 'dac' | {GenericIn} 'in' | {GenericOut} 'out' 
;

TimeUnit:
	{Millisecond} ('millisecond' | 'milliseconds' | 'ms') | {Second} ('second'|'seconds'|'s') | {Minute} ('minute'|'minutes'|'m') | {Hour} ('hour'|'hours'|'h')
;

terminal MAC:
	HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE (':') HEXBYTE
;

terminal fragment HEXBYTE:
	('0'..'9'|'A'..'F')('0'..'9'|'A'..'F')
;

Binding:
	SensorOutput | Setting
;

SensorOutput:
	'out' (output=STRING)? 'as' name=ID ('with' 'mapping' mapping = Exp)?
;

Actuator:
	'Actuator' type = ID name=ID ':'
	'pins' pins += Pin* (',' pins += Pin)* 
	settings += Setting*
	trigger = Trigger
;

Trigger:
	{When} 'when' exp = Exp
	 | {OnOff} 'on' onExp = Exp (('off' offExp = Exp) | ('run' 'for' time=INT unit=TimeUnit))
;

Setting:
	'setting' name=ID '=' value=Primitive
;

terminal DECIMAL:
	'-'? INT ('.' INT)+
;

Primitive:
	{BooleanTrue} 'TRUE' | {BooleanFalse} 'FALSE' | NumberPrimitive
;

NumberPrimitive:
	{IntPrimitive} value=INT | {DecimalPrimitive} value = DECIMAL
;

Exp returns Expression:
	Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
;

Factor returns Expression:
	Compare (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Compare)*
;

Compare returns Expression:
	CompareOrEquals (( {Greater.left=current} '>' | {Lesser.left=current}  '<' ) right=CompareOrEquals)*
;

CompareOrEquals returns Expression:
	EqualsOrNotEquals (({GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=EqualsOrNotEquals)*
;

EqualsOrNotEquals returns Expression:
	AndOr (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=AndOr)*
;

AndOr returns Expression:
	Primary (({And.left=current} 'and' | {Or.left=current}  'or' ) right=Primary)*
;

Primary returns Expression:
	 Primitive | Parenthesis | VariableUse | ExternalCall | {Value} 'value'
;

ExternalCall:
	'call' func = ID '(' args += Exp? (',' args += Exp)* ')'
;

InternalVariableUse:
	ref = [Binding]
;

ExternalVariableUse:
	obj = [Device] ('.'|'->') ref = [Binding] 
;

GraphVariableUse:
	worker = [Worker] ('.'|'->') device = [Device] ('.'|'->') ref = [Binding]
;

VariableUse:
	InternalVariableUse | ExternalVariableUse | GraphVariableUse
;

Parenthesis:
	'(' exp=Exp ')'
;