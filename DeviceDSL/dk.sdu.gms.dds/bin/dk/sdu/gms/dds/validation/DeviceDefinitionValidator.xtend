/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.gms.dds.validation

import dk.sdu.gms.dds.deviceDefinition.Device
import dk.sdu.gms.dds.deviceDefinition.Actuator
import dk.sdu.gms.dds.deviceDefinition.Sensor
import dk.sdu.gms.dds.deviceDefinition.DeviceDefinitionPackage
import org.eclipse.xtext.validation.Check
import dk.sdu.gms.dds.sensors.SensorDefinition
import dk.sdu.gms.dds.actuators.ActuatorDefinition
import dk.sdu.gms.dds.DeviceDefinition

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DeviceDefinitionValidator extends AbstractDeviceDefinitionValidator {
	
	@Check
	def deviceExists (Device device) {
		val definition = DeviceDefinition.getDefinition(device);
		if (definition === null) {
			error('Unknown device \"' + device.type + "\"", DeviceDefinitionPackage.Literals.DEVICE__TYPE)
		}
	}

	@Check // Yes this code is gross, shut up.
	def checkDevicePins (Device device) {
		val hasAllPins = switch (device) {
			case Actuator: device.pins.size() == ActuatorDefinition.getActuatorDefinition(device as Actuator).pinCount
			case Sensor: device.pins.size() == SensorDefinition.getSensorDefinition(device as Sensor).pinCount
		}
		
		if (!hasAllPins) {
			switch (device) {
				case Actuator: warning('Device needs ' + ActuatorDefinition.getActuatorDefinition(device as Actuator).pinCount + " pins", 
					DeviceDefinitionPackage.Literals.DEVICE__PINS)
				case Sensor: warning('Device needs ' + SensorDefinition.getSensorDefinition(device as Sensor).pinCount + " pins", 
					DeviceDefinitionPackage.Literals.DEVICE__PINS)
			}
		}
	}
	
}
