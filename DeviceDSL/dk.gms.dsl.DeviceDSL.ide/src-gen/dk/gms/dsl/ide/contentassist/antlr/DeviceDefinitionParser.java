/*
 * generated by Xtext 2.25.0
 */
package dk.gms.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.gms.dsl.ide.contentassist.antlr.internal.InternalDeviceDefinitionParser;
import dk.gms.dsl.services.DeviceDefinitionGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DeviceDefinitionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DeviceDefinitionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DeviceDefinitionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSlaveAccess().getDevicesAlternatives_5_0(), "rule__Slave__DevicesAlternatives_5_0");
			builder.put(grammarAccess.getGraphTypeAccess().getAlternatives(), "rule__GraphType__Alternatives");
			builder.put(grammarAccess.getSensorTypeAccess().getAlternatives(), "rule__SensorType__Alternatives");
			builder.put(grammarAccess.getActuatorTypeAccess().getAlternatives(), "rule__ActuatorType__Alternatives");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getGraphAccess().getGroup(), "rule__Graph__Group__0");
			builder.put(grammarAccess.getMasterAccess().getGroup(), "rule__Master__Group__0");
			builder.put(grammarAccess.getSlaveAccess().getGroup(), "rule__Slave__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_6(), "rule__Sensor__Group_6__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_6(), "rule__Actuator__Group_6__0");
			builder.put(grammarAccess.getSettingAccess().getGroup(), "rule__Setting__Group__0");
			builder.put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
			builder.put(grammarAccess.getSystemAccess().getMasterAssignment_3(), "rule__System__MasterAssignment_3");
			builder.put(grammarAccess.getSystemAccess().getGraphsAssignment_4(), "rule__System__GraphsAssignment_4");
			builder.put(grammarAccess.getGraphAccess().getNameAssignment_1(), "rule__Graph__NameAssignment_1");
			builder.put(grammarAccess.getGraphAccess().getTypeAssignment_4(), "rule__Graph__TypeAssignment_4");
			builder.put(grammarAccess.getGraphAccess().getCategoryAssignment_6(), "rule__Graph__CategoryAssignment_6");
			builder.put(grammarAccess.getGraphAccess().getTitleAssignment_8(), "rule__Graph__TitleAssignment_8");
			builder.put(grammarAccess.getGraphAccess().getXlabelAssignment_10(), "rule__Graph__XlabelAssignment_10");
			builder.put(grammarAccess.getGraphAccess().getYlabelAssignment_12(), "rule__Graph__YlabelAssignment_12");
			builder.put(grammarAccess.getMasterAccess().getNameAssignment_1(), "rule__Master__NameAssignment_1");
			builder.put(grammarAccess.getMasterAccess().getBluetoothNameAssignment_4(), "rule__Master__BluetoothNameAssignment_4");
			builder.put(grammarAccess.getMasterAccess().getSlavesAssignment_5(), "rule__Master__SlavesAssignment_5");
			builder.put(grammarAccess.getSlaveAccess().getNameAssignment_1(), "rule__Slave__NameAssignment_1");
			builder.put(grammarAccess.getSlaveAccess().getBluetoothNameAssignment_4(), "rule__Slave__BluetoothNameAssignment_4");
			builder.put(grammarAccess.getSlaveAccess().getDevicesAssignment_5(), "rule__Slave__DevicesAssignment_5");
			builder.put(grammarAccess.getSensorAccess().getTypeAssignment_1(), "rule__Sensor__TypeAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getPinsAssignment_5(), "rule__Sensor__PinsAssignment_5");
			builder.put(grammarAccess.getSensorAccess().getPinsAssignment_6_1(), "rule__Sensor__PinsAssignment_6_1");
			builder.put(grammarAccess.getSensorAccess().getGraphAssignment_9(), "rule__Sensor__GraphAssignment_9");
			builder.put(grammarAccess.getActuatorAccess().getTypeAssignment_1(), "rule__Actuator__TypeAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getPinsAssignment_5(), "rule__Actuator__PinsAssignment_5");
			builder.put(grammarAccess.getActuatorAccess().getPinsAssignment_6_1(), "rule__Actuator__PinsAssignment_6_1");
			builder.put(grammarAccess.getActuatorAccess().getSettingsAssignment_8(), "rule__Actuator__SettingsAssignment_8");
			builder.put(grammarAccess.getSettingAccess().getNameAssignment_1(), "rule__Setting__NameAssignment_1");
			builder.put(grammarAccess.getSettingAccess().getValueAssignment_4(), "rule__Setting__ValueAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DeviceDefinitionGrammarAccess grammarAccess;

	@Override
	protected InternalDeviceDefinitionParser createParser() {
		InternalDeviceDefinitionParser result = new InternalDeviceDefinitionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DeviceDefinitionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DeviceDefinitionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
