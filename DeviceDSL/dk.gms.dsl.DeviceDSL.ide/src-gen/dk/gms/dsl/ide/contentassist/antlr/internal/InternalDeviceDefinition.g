/*
 * generated by Xtext 2.25.0
 */
grammar InternalDeviceDefinition;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.gms.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.gms.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.gms.dsl.services.DeviceDefinitionGrammarAccess;

}
@parser::members {
	private DeviceDefinitionGrammarAccess grammarAccess;

	public void setGrammarAccess(DeviceDefinitionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSystem
entryRuleSystem
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemAccess().getGroup()); }
		(rule__System__Group__0)
		{ after(grammarAccess.getSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaster
entryRuleMaster
:
{ before(grammarAccess.getMasterRule()); }
	 ruleMaster
{ after(grammarAccess.getMasterRule()); } 
	 EOF 
;

// Rule Master
ruleMaster 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMasterAccess().getGroup()); }
		(rule__Master__Group__0)
		{ after(grammarAccess.getMasterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSlave
entryRuleSlave
:
{ before(grammarAccess.getSlaveRule()); }
	 ruleSlave
{ after(grammarAccess.getSlaveRule()); } 
	 EOF 
;

// Rule Slave
ruleSlave 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSlaveAccess().getGroup()); }
		(rule__Slave__Group__0)
		{ after(grammarAccess.getSlaveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuator
entryRuleActuator
:
{ before(grammarAccess.getActuatorRule()); }
	 ruleActuator
{ after(grammarAccess.getActuatorRule()); } 
	 EOF 
;

// Rule Actuator
ruleActuator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorAccess().getGroup()); }
		(rule__Actuator__Group__0)
		{ after(grammarAccess.getActuatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetting
entryRuleSetting
:
{ before(grammarAccess.getSettingRule()); }
	 ruleSetting
{ after(grammarAccess.getSettingRule()); } 
	 EOF 
;

// Rule Setting
ruleSetting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSettingAccess().getGroup()); }
		(rule__Setting__Group__0)
		{ after(grammarAccess.getSettingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule GraphType
ruleGraphType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphTypeAccess().getAlternatives()); }
		(rule__GraphType__Alternatives)
		{ after(grammarAccess.getGraphTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SensorType
ruleSensorType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getAlternatives()); }
		(rule__SensorType__Alternatives)
		{ after(grammarAccess.getSensorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ActuatorType
ruleActuatorType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getAlternatives()); }
		(rule__ActuatorType__Alternatives)
		{ after(grammarAccess.getActuatorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__DevicesAlternatives_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSlaveAccess().getDevicesSensorParserRuleCall_5_0_0()); }
		ruleSensor
		{ after(grammarAccess.getSlaveAccess().getDevicesSensorParserRuleCall_5_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSlaveAccess().getDevicesActuatorParserRuleCall_5_0_1()); }
		ruleActuator
		{ after(grammarAccess.getSlaveAccess().getDevicesActuatorParserRuleCall_5_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphTypeAccess().getLineEnumLiteralDeclaration_0()); }
		('Line')
		{ after(grammarAccess.getGraphTypeAccess().getLineEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getGraphTypeAccess().getBoxPlotEnumLiteralDeclaration_1()); }
		('BoxPlot')
		{ after(grammarAccess.getGraphTypeAccess().getBoxPlotEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getGraphTypeAccess().getHistogramEnumLiteralDeclaration_2()); }
		('Histogram')
		{ after(grammarAccess.getGraphTypeAccess().getHistogramEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getMoistureEnumLiteralDeclaration_0()); }
		('Moisture')
		{ after(grammarAccess.getSensorTypeAccess().getMoistureEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getTemperatureEnumLiteralDeclaration_1()); }
		('Temperature')
		{ after(grammarAccess.getSensorTypeAccess().getTemperatureEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getHumidityAndTemperatureEnumLiteralDeclaration_2()); }
		('HumidityAndTemperature')
		{ after(grammarAccess.getSensorTypeAccess().getHumidityAndTemperatureEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getAirHumidityEnumLiteralDeclaration_3()); }
		('AirHumidity')
		{ after(grammarAccess.getSensorTypeAccess().getAirHumidityEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getCO2EnumLiteralDeclaration_4()); }
		('CO2')
		{ after(grammarAccess.getSensorTypeAccess().getCO2EnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getLightEnumLiteralDeclaration_5()); }
		('Light')
		{ after(grammarAccess.getSensorTypeAccess().getLightEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActuatorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorTypeAccess().getLEDEnumLiteralDeclaration_0()); }
		('LED')
		{ after(grammarAccess.getActuatorTypeAccess().getLEDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActuatorTypeAccess().getWaterPumpEnumLiteralDeclaration_1()); }
		('WaterPump')
		{ after(grammarAccess.getActuatorTypeAccess().getWaterPumpEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getSystemKeyword_0()); }
	'System'
	{ after(grammarAccess.getSystemAccess().getSystemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getNameAssignment_1()); }
	(rule__System__NameAssignment_1)
	{ after(grammarAccess.getSystemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSystemAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__3__Impl
	rule__System__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getMasterAssignment_3()); }
	(rule__System__MasterAssignment_3)
	{ after(grammarAccess.getSystemAccess().getMasterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getGraphsAssignment_4()); }
	(rule__System__GraphsAssignment_4)*
	{ after(grammarAccess.getSystemAccess().getGraphsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
	'Graph'
	{ after(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getNameAssignment_1()); }
	(rule__Graph__NameAssignment_1)
	{ after(grammarAccess.getGraphAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__2__Impl
	rule__Graph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getGraphAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__3__Impl
	rule__Graph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getTypeKeyword_3()); }
	'type'
	{ after(grammarAccess.getGraphAccess().getTypeKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__4__Impl
	rule__Graph__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getTypeAssignment_4()); }
	(rule__Graph__TypeAssignment_4)
	{ after(grammarAccess.getGraphAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__5__Impl
	rule__Graph__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getCategoryKeyword_5()); }
	'category'
	{ after(grammarAccess.getGraphAccess().getCategoryKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__6__Impl
	rule__Graph__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getCategoryAssignment_6()); }
	(rule__Graph__CategoryAssignment_6)
	{ after(grammarAccess.getGraphAccess().getCategoryAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__7__Impl
	rule__Graph__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getTitleKeyword_7()); }
	'title'
	{ after(grammarAccess.getGraphAccess().getTitleKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__8__Impl
	rule__Graph__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getTitleAssignment_8()); }
	(rule__Graph__TitleAssignment_8)
	{ after(grammarAccess.getGraphAccess().getTitleAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__9__Impl
	rule__Graph__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getXlabelKeyword_9()); }
	'xlabel'
	{ after(grammarAccess.getGraphAccess().getXlabelKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__10__Impl
	rule__Graph__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getXlabelAssignment_10()); }
	(rule__Graph__XlabelAssignment_10)
	{ after(grammarAccess.getGraphAccess().getXlabelAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__11__Impl
	rule__Graph__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getYlabelKeyword_11()); }
	'ylabel'
	{ after(grammarAccess.getGraphAccess().getYlabelKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getYlabelAssignment_12()); }
	(rule__Graph__YlabelAssignment_12)
	{ after(grammarAccess.getGraphAccess().getYlabelAssignment_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Master__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__0__Impl
	rule__Master__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMasterAccess().getMasterKeyword_0()); }
	'Master'
	{ after(grammarAccess.getMasterAccess().getMasterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__1__Impl
	rule__Master__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMasterAccess().getNameAssignment_1()); }
	(rule__Master__NameAssignment_1)
	{ after(grammarAccess.getMasterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__2__Impl
	rule__Master__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMasterAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getMasterAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__3__Impl
	rule__Master__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMasterAccess().getBluetoothKeyword_3()); }
	'bluetooth'
	{ after(grammarAccess.getMasterAccess().getBluetoothKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__4__Impl
	rule__Master__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMasterAccess().getBluetoothNameAssignment_4()); }
	(rule__Master__BluetoothNameAssignment_4)
	{ after(grammarAccess.getMasterAccess().getBluetoothNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Master__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMasterAccess().getSlavesAssignment_5()); }
		(rule__Master__SlavesAssignment_5)
		{ after(grammarAccess.getMasterAccess().getSlavesAssignment_5()); }
	)
	(
		{ before(grammarAccess.getMasterAccess().getSlavesAssignment_5()); }
		(rule__Master__SlavesAssignment_5)*
		{ after(grammarAccess.getMasterAccess().getSlavesAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Slave__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__0__Impl
	rule__Slave__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getSlaveKeyword_0()); }
	'Slave'
	{ after(grammarAccess.getSlaveAccess().getSlaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__1__Impl
	rule__Slave__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getNameAssignment_1()); }
	(rule__Slave__NameAssignment_1)
	{ after(grammarAccess.getSlaveAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__2__Impl
	rule__Slave__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSlaveAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__3__Impl
	rule__Slave__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getBluetoothKeyword_3()); }
	'bluetooth'
	{ after(grammarAccess.getSlaveAccess().getBluetoothKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__4__Impl
	rule__Slave__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getBluetoothNameAssignment_4()); }
	(rule__Slave__BluetoothNameAssignment_4)
	{ after(grammarAccess.getSlaveAccess().getBluetoothNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slave__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSlaveAccess().getDevicesAssignment_5()); }
	(rule__Slave__DevicesAssignment_5)*
	{ after(grammarAccess.getSlaveAccess().getDevicesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
	'Sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getTypeAssignment_1()); }
	(rule__Sensor__TypeAssignment_1)
	{ after(grammarAccess.getSensorAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSensorAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__3__Impl
	rule__Sensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getPinsKeyword_3()); }
	'pins'
	{ after(grammarAccess.getSensorAccess().getPinsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__4__Impl
	rule__Sensor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getSensorAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__5__Impl
	rule__Sensor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getPinsAssignment_5()); }
	(rule__Sensor__PinsAssignment_5)*
	{ after(grammarAccess.getSensorAccess().getPinsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__6__Impl
	rule__Sensor__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_6()); }
	(rule__Sensor__Group_6__0)*
	{ after(grammarAccess.getSensorAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__7__Impl
	rule__Sensor__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getSensorAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__8__Impl
	rule__Sensor__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGraphKeyword_8()); }
	'graph'
	{ after(grammarAccess.getSensorAccess().getGraphKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGraphAssignment_9()); }
	(rule__Sensor__GraphAssignment_9)
	{ after(grammarAccess.getSensorAccess().getGraphAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_6__0__Impl
	rule__Sensor__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getSensorAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getPinsAssignment_6_1()); }
	(rule__Sensor__PinsAssignment_6_1)
	{ after(grammarAccess.getSensorAccess().getPinsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__0__Impl
	rule__Actuator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorKeyword_0()); }
	'Actuator'
	{ after(grammarAccess.getActuatorAccess().getActuatorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__1__Impl
	rule__Actuator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getTypeAssignment_1()); }
	(rule__Actuator__TypeAssignment_1)
	{ after(grammarAccess.getActuatorAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__2__Impl
	rule__Actuator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getActuatorAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__3__Impl
	rule__Actuator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getPinsKeyword_3()); }
	'pins'
	{ after(grammarAccess.getActuatorAccess().getPinsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__4__Impl
	rule__Actuator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getActuatorAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__5__Impl
	rule__Actuator__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getPinsAssignment_5()); }
	(rule__Actuator__PinsAssignment_5)*
	{ after(grammarAccess.getActuatorAccess().getPinsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__6__Impl
	rule__Actuator__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getGroup_6()); }
	(rule__Actuator__Group_6__0)*
	{ after(grammarAccess.getActuatorAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__7__Impl
	rule__Actuator__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getActuatorAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getSettingsAssignment_8()); }
	(rule__Actuator__SettingsAssignment_8)*
	{ after(grammarAccess.getActuatorAccess().getSettingsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group_6__0__Impl
	rule__Actuator__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getActuatorAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getPinsAssignment_6_1()); }
	(rule__Actuator__PinsAssignment_6_1)
	{ after(grammarAccess.getActuatorAccess().getPinsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Setting__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setting__Group__0__Impl
	rule__Setting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSettingAccess().getSettingKeyword_0()); }
	'Setting'
	{ after(grammarAccess.getSettingAccess().getSettingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setting__Group__1__Impl
	rule__Setting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSettingAccess().getNameAssignment_1()); }
	(rule__Setting__NameAssignment_1)
	{ after(grammarAccess.getSettingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setting__Group__2__Impl
	rule__Setting__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSettingAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSettingAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setting__Group__3__Impl
	rule__Setting__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSettingAccess().getDefaultKeyword_3()); }
	'default'
	{ after(grammarAccess.getSettingAccess().getDefaultKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Setting__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSettingAccess().getValueAssignment_4()); }
	(rule__Setting__ValueAssignment_4)
	{ after(grammarAccess.getSettingAccess().getValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__MasterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getMasterMasterParserRuleCall_3_0()); }
		ruleMaster
		{ after(grammarAccess.getSystemAccess().getMasterMasterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__GraphsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getGraphsGraphParserRuleCall_4_0()); }
		ruleGraph
		{ after(grammarAccess.getSystemAccess().getGraphsGraphParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getTypeGraphTypeEnumRuleCall_4_0()); }
		ruleGraphType
		{ after(grammarAccess.getGraphAccess().getTypeGraphTypeEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__CategoryAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getCategorySTRINGTerminalRuleCall_6_0()); }
		RULE_STRING
		{ after(grammarAccess.getGraphAccess().getCategorySTRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__TitleAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getTitleSTRINGTerminalRuleCall_8_0()); }
		RULE_STRING
		{ after(grammarAccess.getGraphAccess().getTitleSTRINGTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__XlabelAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getXlabelSTRINGTerminalRuleCall_10_0()); }
		RULE_STRING
		{ after(grammarAccess.getGraphAccess().getXlabelSTRINGTerminalRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__YlabelAssignment_12
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getYlabelSTRINGTerminalRuleCall_12_0()); }
		RULE_STRING
		{ after(grammarAccess.getGraphAccess().getYlabelSTRINGTerminalRuleCall_12_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMasterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMasterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__BluetoothNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMasterAccess().getBluetoothNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getMasterAccess().getBluetoothNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Master__SlavesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMasterAccess().getSlavesSlaveParserRuleCall_5_0()); }
		ruleSlave
		{ after(grammarAccess.getMasterAccess().getSlavesSlaveParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSlaveAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSlaveAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__BluetoothNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSlaveAccess().getBluetoothNameSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getSlaveAccess().getBluetoothNameSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slave__DevicesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSlaveAccess().getDevicesAlternatives_5_0()); }
		(rule__Slave__DevicesAlternatives_5_0)
		{ after(grammarAccess.getSlaveAccess().getDevicesAlternatives_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getTypeSensorTypeEnumRuleCall_1_0()); }
		ruleSensorType
		{ after(grammarAccess.getSensorAccess().getTypeSensorTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__PinsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getPinsINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getSensorAccess().getPinsINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__PinsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getPinsINTTerminalRuleCall_6_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSensorAccess().getPinsINTTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__GraphAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getGraphGraphCrossReference_9_0()); }
		(
			{ before(grammarAccess.getSensorAccess().getGraphGraphIDTerminalRuleCall_9_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorAccess().getGraphGraphIDTerminalRuleCall_9_0_1()); }
		)
		{ after(grammarAccess.getSensorAccess().getGraphGraphCrossReference_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getTypeActuatorTypeEnumRuleCall_1_0()); }
		ruleActuatorType
		{ after(grammarAccess.getActuatorAccess().getTypeActuatorTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__PinsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getPinsINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getActuatorAccess().getPinsINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__PinsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getPinsINTTerminalRuleCall_6_1_0()); }
		RULE_INT
		{ after(grammarAccess.getActuatorAccess().getPinsINTTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__SettingsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActuatorAccess().getSettingsSettingParserRuleCall_8_0()); }
		ruleSetting
		{ after(grammarAccess.getActuatorAccess().getSettingsSettingParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSettingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSettingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Setting__ValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSettingAccess().getValueINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getSettingAccess().getValueINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
