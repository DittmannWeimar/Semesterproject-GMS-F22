/*
 * generated by Xtext 2.25.0
 */
package dk.gms.dsl.serializer;

import com.google.inject.Inject;
import dk.gms.dsl.deviceDefinition.Actuator;
import dk.gms.dsl.deviceDefinition.DeviceDefinitionPackage;
import dk.gms.dsl.deviceDefinition.Graph;
import dk.gms.dsl.deviceDefinition.Master;
import dk.gms.dsl.deviceDefinition.Sensor;
import dk.gms.dsl.deviceDefinition.Setting;
import dk.gms.dsl.deviceDefinition.Slave;
import dk.gms.dsl.services.DeviceDefinitionGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DeviceDefinitionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DeviceDefinitionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeviceDefinitionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeviceDefinitionPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case DeviceDefinitionPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case DeviceDefinitionPackage.MASTER:
				sequence_Master(context, (Master) semanticObject); 
				return; 
			case DeviceDefinitionPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case DeviceDefinitionPackage.SETTING:
				sequence_Setting(context, (Setting) semanticObject); 
				return; 
			case DeviceDefinitionPackage.SLAVE:
				sequence_Slave(context, (Slave) semanticObject); 
				return; 
			case DeviceDefinitionPackage.SYSTEM:
				sequence_System(context, (dk.gms.dsl.deviceDefinition.System) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (type=ActuatorType pins+=INT* pins+=INT* settings+=Setting*)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Graph returns Graph
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=GraphType 
	 *         category=STRING 
	 *         title=STRING 
	 *         xlabel=STRING 
	 *         ylabel=STRING
	 *     )
	 */
	protected void sequence_Graph(ISerializationContext context, Graph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__NAME));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__TYPE));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__TITLE));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__XLABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__XLABEL));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__YLABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.GRAPH__YLABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGraphAccess().getTypeGraphTypeEnumRuleCall_4_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getGraphAccess().getCategorySTRINGTerminalRuleCall_6_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getGraphAccess().getTitleSTRINGTerminalRuleCall_8_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getGraphAccess().getXlabelSTRINGTerminalRuleCall_10_0(), semanticObject.getXlabel());
		feeder.accept(grammarAccess.getGraphAccess().getYlabelSTRINGTerminalRuleCall_12_0(), semanticObject.getYlabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Master returns Master
	 *
	 * Constraint:
	 *     (name=ID bluetoothName=STRING slaves+=Slave+)
	 */
	protected void sequence_Master(ISerializationContext context, Master semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (type=SensorType pins+=INT* pins+=INT* graph=[Graph|ID])
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Setting returns Setting
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_Setting(ISerializationContext context, Setting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.SETTING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.SETTING__NAME));
			if (transientValues.isValueTransient(semanticObject, DeviceDefinitionPackage.Literals.SETTING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeviceDefinitionPackage.Literals.SETTING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSettingAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSettingAccess().getValueINTTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Slave returns Slave
	 *
	 * Constraint:
	 *     (name=ID bluetoothName=STRING (devices+=Sensor | devices+=Actuator)*)
	 */
	protected void sequence_Slave(ISerializationContext context, Slave semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (name=ID master=Master graphs+=Graph*)
	 */
	protected void sequence_System(ISerializationContext context, dk.gms.dsl.deviceDefinition.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
