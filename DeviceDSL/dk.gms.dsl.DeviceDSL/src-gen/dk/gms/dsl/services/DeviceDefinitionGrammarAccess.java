/*
 * generated by Xtext 2.25.0
 */
package dk.gms.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DeviceDefinitionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMasterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMasterMasterParserRuleCall_3_0 = (RuleCall)cMasterAssignment_3.eContents().get(0);
		private final Assignment cGraphsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGraphsGraphParserRuleCall_4_0 = (RuleCall)cGraphsAssignment_4.eContents().get(0);
		
		//System:
		//    'System' name=ID ':'
		//    master=Master
		//    graphs += Graph*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'System' name=ID ':'
		//master=Master
		//graphs += Graph*
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//master=Master
		public Assignment getMasterAssignment_3() { return cMasterAssignment_3; }
		
		//Master
		public RuleCall getMasterMasterParserRuleCall_3_0() { return cMasterMasterParserRuleCall_3_0; }
		
		//graphs += Graph*
		public Assignment getGraphsAssignment_4() { return cGraphsAssignment_4; }
		
		//Graph
		public RuleCall getGraphsGraphParserRuleCall_4_0() { return cGraphsGraphParserRuleCall_4_0; }
	}
	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeGraphTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cCategoryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCategoryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCategorySTRINGTerminalRuleCall_6_0 = (RuleCall)cCategoryAssignment_6.eContents().get(0);
		private final Keyword cTitleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTitleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTitleSTRINGTerminalRuleCall_8_0 = (RuleCall)cTitleAssignment_8.eContents().get(0);
		private final Keyword cXlabelKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cXlabelAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cXlabelSTRINGTerminalRuleCall_10_0 = (RuleCall)cXlabelAssignment_10.eContents().get(0);
		private final Keyword cYlabelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cYlabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cYlabelSTRINGTerminalRuleCall_12_0 = (RuleCall)cYlabelAssignment_12.eContents().get(0);
		
		//Graph:
		//    'Graph' name=ID ':'
		//    'type' type = GraphType
		//    'category' category = STRING
		//    'title' title = STRING
		//    'xlabel' xlabel = STRING
		//    'ylabel' ylabel = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Graph' name=ID ':'
		//'type' type = GraphType
		//'category' category = STRING
		//'title' title = STRING
		//'xlabel' xlabel = STRING
		//'ylabel' ylabel = STRING
		public Group getGroup() { return cGroup; }
		
		//'Graph'
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type = GraphType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//GraphType
		public RuleCall getTypeGraphTypeEnumRuleCall_4_0() { return cTypeGraphTypeEnumRuleCall_4_0; }
		
		//'category'
		public Keyword getCategoryKeyword_5() { return cCategoryKeyword_5; }
		
		//category = STRING
		public Assignment getCategoryAssignment_6() { return cCategoryAssignment_6; }
		
		//STRING
		public RuleCall getCategorySTRINGTerminalRuleCall_6_0() { return cCategorySTRINGTerminalRuleCall_6_0; }
		
		//'title'
		public Keyword getTitleKeyword_7() { return cTitleKeyword_7; }
		
		//title = STRING
		public Assignment getTitleAssignment_8() { return cTitleAssignment_8; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_8_0() { return cTitleSTRINGTerminalRuleCall_8_0; }
		
		//'xlabel'
		public Keyword getXlabelKeyword_9() { return cXlabelKeyword_9; }
		
		//xlabel = STRING
		public Assignment getXlabelAssignment_10() { return cXlabelAssignment_10; }
		
		//STRING
		public RuleCall getXlabelSTRINGTerminalRuleCall_10_0() { return cXlabelSTRINGTerminalRuleCall_10_0; }
		
		//'ylabel'
		public Keyword getYlabelKeyword_11() { return cYlabelKeyword_11; }
		
		//ylabel = STRING
		public Assignment getYlabelAssignment_12() { return cYlabelAssignment_12; }
		
		//STRING
		public RuleCall getYlabelSTRINGTerminalRuleCall_12_0() { return cYlabelSTRINGTerminalRuleCall_12_0; }
	}
	public class MasterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Master");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMasterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBluetoothKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBluetoothNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBluetoothNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cBluetoothNameAssignment_4.eContents().get(0);
		private final Assignment cSlavesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlavesSlaveParserRuleCall_5_0 = (RuleCall)cSlavesAssignment_5.eContents().get(0);
		
		//Master:
		//    'Master' name=ID ':'
		//    'bluetooth' bluetoothName=STRING
		//    slaves += Slave+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Master' name=ID ':'
		//'bluetooth' bluetoothName=STRING
		//slaves += Slave+
		public Group getGroup() { return cGroup; }
		
		//'Master'
		public Keyword getMasterKeyword_0() { return cMasterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'bluetooth'
		public Keyword getBluetoothKeyword_3() { return cBluetoothKeyword_3; }
		
		//bluetoothName=STRING
		public Assignment getBluetoothNameAssignment_4() { return cBluetoothNameAssignment_4; }
		
		//STRING
		public RuleCall getBluetoothNameSTRINGTerminalRuleCall_4_0() { return cBluetoothNameSTRINGTerminalRuleCall_4_0; }
		
		//slaves += Slave+
		public Assignment getSlavesAssignment_5() { return cSlavesAssignment_5; }
		
		//Slave
		public RuleCall getSlavesSlaveParserRuleCall_5_0() { return cSlavesSlaveParserRuleCall_5_0; }
	}
	public class SlaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Slave");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBluetoothKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBluetoothNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBluetoothNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cBluetoothNameAssignment_4.eContents().get(0);
		private final Assignment cDevicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cDevicesAlternatives_5_0 = (Alternatives)cDevicesAssignment_5.eContents().get(0);
		private final RuleCall cDevicesSensorParserRuleCall_5_0_0 = (RuleCall)cDevicesAlternatives_5_0.eContents().get(0);
		private final RuleCall cDevicesActuatorParserRuleCall_5_0_1 = (RuleCall)cDevicesAlternatives_5_0.eContents().get(1);
		
		//Slave:
		//    'Slave' name=ID ':'
		//    'bluetooth' bluetoothName=STRING
		//    devices += (Sensor | Actuator)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Slave' name=ID ':'
		//'bluetooth' bluetoothName=STRING
		//devices += (Sensor | Actuator)*
		public Group getGroup() { return cGroup; }
		
		//'Slave'
		public Keyword getSlaveKeyword_0() { return cSlaveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'bluetooth'
		public Keyword getBluetoothKeyword_3() { return cBluetoothKeyword_3; }
		
		//bluetoothName=STRING
		public Assignment getBluetoothNameAssignment_4() { return cBluetoothNameAssignment_4; }
		
		//STRING
		public RuleCall getBluetoothNameSTRINGTerminalRuleCall_4_0() { return cBluetoothNameSTRINGTerminalRuleCall_4_0; }
		
		//devices += (Sensor | Actuator)*
		public Assignment getDevicesAssignment_5() { return cDevicesAssignment_5; }
		
		//(Sensor | Actuator)
		public Alternatives getDevicesAlternatives_5_0() { return cDevicesAlternatives_5_0; }
		
		//Sensor
		public RuleCall getDevicesSensorParserRuleCall_5_0_0() { return cDevicesSensorParserRuleCall_5_0_0; }
		
		//Actuator
		public RuleCall getDevicesActuatorParserRuleCall_5_0_1() { return cDevicesActuatorParserRuleCall_5_0_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSensorTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinsINTTerminalRuleCall_5_0 = (RuleCall)cPinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPinsINTTerminalRuleCall_6_1_0 = (RuleCall)cPinsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGraphKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cGraphAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cGraphGraphCrossReference_9_0 = (CrossReference)cGraphAssignment_9.eContents().get(0);
		private final RuleCall cGraphGraphIDTerminalRuleCall_9_0_1 = (RuleCall)cGraphGraphCrossReference_9_0.eContents().get(1);
		
		//Sensor:
		//    'Sensor' type = SensorType ':'
		//    'pins' '(' pins += INT* (',' pins += INT)* ')'
		//    'graph' graph = [Graph]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' type = SensorType ':'
		//'pins' '(' pins += INT* (',' pins += INT)* ')'
		//'graph' graph = [Graph]
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//type = SensorType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//SensorType
		public RuleCall getTypeSensorTypeEnumRuleCall_1_0() { return cTypeSensorTypeEnumRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'pins'
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//pins += INT*
		public Assignment getPinsAssignment_5() { return cPinsAssignment_5; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_5_0() { return cPinsINTTerminalRuleCall_5_0; }
		
		//(',' pins += INT)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pins += INT
		public Assignment getPinsAssignment_6_1() { return cPinsAssignment_6_1; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_6_1_0() { return cPinsINTTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'graph'
		public Keyword getGraphKeyword_8() { return cGraphKeyword_8; }
		
		//graph = [Graph]
		public Assignment getGraphAssignment_9() { return cGraphAssignment_9; }
		
		//[Graph]
		public CrossReference getGraphGraphCrossReference_9_0() { return cGraphGraphCrossReference_9_0; }
		
		//ID
		public RuleCall getGraphGraphIDTerminalRuleCall_9_0_1() { return cGraphGraphIDTerminalRuleCall_9_0_1; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeActuatorTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinsINTTerminalRuleCall_5_0 = (RuleCall)cPinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPinsINTTerminalRuleCall_6_1_0 = (RuleCall)cPinsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSettingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSettingsSettingParserRuleCall_8_0 = (RuleCall)cSettingsAssignment_8.eContents().get(0);
		
		//Actuator:
		//    'Actuator' type = ActuatorType ':'
		//    'pins' '(' pins += INT* (',' pins += INT)* ')'
		//    settings += Setting*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actuator' type = ActuatorType ':'
		//'pins' '(' pins += INT* (',' pins += INT)* ')'
		//settings += Setting*
		public Group getGroup() { return cGroup; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//type = ActuatorType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ActuatorType
		public RuleCall getTypeActuatorTypeEnumRuleCall_1_0() { return cTypeActuatorTypeEnumRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'pins'
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//pins += INT*
		public Assignment getPinsAssignment_5() { return cPinsAssignment_5; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_5_0() { return cPinsINTTerminalRuleCall_5_0; }
		
		//(',' pins += INT)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pins += INT
		public Assignment getPinsAssignment_6_1() { return cPinsAssignment_6_1; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_6_1_0() { return cPinsINTTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//settings += Setting*
		public Assignment getSettingsAssignment_8() { return cSettingsAssignment_8; }
		
		//Setting
		public RuleCall getSettingsSettingParserRuleCall_8_0() { return cSettingsSettingParserRuleCall_8_0; }
	}
	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.Setting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSettingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDefaultKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueINTTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Setting:
		//    'Setting' name=ID ':'
		//    'default' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Setting' name=ID ':'
		//'default' value=INT
		public Group getGroup() { return cGroup; }
		
		//'Setting'
		public Keyword getSettingKeyword_0() { return cSettingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'default'
		public Keyword getDefaultKeyword_3() { return cDefaultKeyword_3; }
		
		//value=INT
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_0() { return cValueINTTerminalRuleCall_4_0; }
	}
	
	public class GraphTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.GraphType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLineLineKeyword_0_0 = (Keyword)cLineEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBoxPlotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBoxPlotBoxPlotKeyword_1_0 = (Keyword)cBoxPlotEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHistogramEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHistogramHistogramKeyword_2_0 = (Keyword)cHistogramEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GraphType:
		//    Line | BoxPlot | Histogram
		//;
		public EnumRule getRule() { return rule; }
		
		//Line | BoxPlot | Histogram
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Line
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_0() { return cLineEnumLiteralDeclaration_0; }
		
		public Keyword getLineLineKeyword_0_0() { return cLineLineKeyword_0_0; }
		
		//BoxPlot
		public EnumLiteralDeclaration getBoxPlotEnumLiteralDeclaration_1() { return cBoxPlotEnumLiteralDeclaration_1; }
		
		public Keyword getBoxPlotBoxPlotKeyword_1_0() { return cBoxPlotBoxPlotKeyword_1_0; }
		
		//Histogram
		public EnumLiteralDeclaration getHistogramEnumLiteralDeclaration_2() { return cHistogramEnumLiteralDeclaration_2; }
		
		public Keyword getHistogramHistogramKeyword_2_0() { return cHistogramHistogramKeyword_2_0; }
	}
	public class SensorTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.SensorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMoistureEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMoistureMoistureKeyword_0_0 = (Keyword)cMoistureEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTemperatureEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTemperatureTemperatureKeyword_1_0 = (Keyword)cTemperatureEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHumidityAndTemperatureEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHumidityAndTemperatureHumidityAndTemperatureKeyword_2_0 = (Keyword)cHumidityAndTemperatureEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAirHumidityEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAirHumidityAirHumidityKeyword_3_0 = (Keyword)cAirHumidityEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCO2EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCO2CO2Keyword_4_0 = (Keyword)cCO2EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLightEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLightLightKeyword_5_0 = (Keyword)cLightEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum SensorType:
		//    Moisture | Temperature | HumidityAndTemperature | AirHumidity | CO2 | Light
		//;
		public EnumRule getRule() { return rule; }
		
		//Moisture | Temperature | HumidityAndTemperature | AirHumidity | CO2 | Light
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Moisture
		public EnumLiteralDeclaration getMoistureEnumLiteralDeclaration_0() { return cMoistureEnumLiteralDeclaration_0; }
		
		public Keyword getMoistureMoistureKeyword_0_0() { return cMoistureMoistureKeyword_0_0; }
		
		//Temperature
		public EnumLiteralDeclaration getTemperatureEnumLiteralDeclaration_1() { return cTemperatureEnumLiteralDeclaration_1; }
		
		public Keyword getTemperatureTemperatureKeyword_1_0() { return cTemperatureTemperatureKeyword_1_0; }
		
		//HumidityAndTemperature
		public EnumLiteralDeclaration getHumidityAndTemperatureEnumLiteralDeclaration_2() { return cHumidityAndTemperatureEnumLiteralDeclaration_2; }
		
		public Keyword getHumidityAndTemperatureHumidityAndTemperatureKeyword_2_0() { return cHumidityAndTemperatureHumidityAndTemperatureKeyword_2_0; }
		
		//AirHumidity
		public EnumLiteralDeclaration getAirHumidityEnumLiteralDeclaration_3() { return cAirHumidityEnumLiteralDeclaration_3; }
		
		public Keyword getAirHumidityAirHumidityKeyword_3_0() { return cAirHumidityAirHumidityKeyword_3_0; }
		
		//CO2
		public EnumLiteralDeclaration getCO2EnumLiteralDeclaration_4() { return cCO2EnumLiteralDeclaration_4; }
		
		public Keyword getCO2CO2Keyword_4_0() { return cCO2CO2Keyword_4_0; }
		
		//Light
		public EnumLiteralDeclaration getLightEnumLiteralDeclaration_5() { return cLightEnumLiteralDeclaration_5; }
		
		public Keyword getLightLightKeyword_5_0() { return cLightLightKeyword_5_0; }
	}
	public class ActuatorTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.gms.dsl.DeviceDefinition.ActuatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEDLEDKeyword_0_0 = (Keyword)cLEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWaterPumpEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWaterPumpWaterPumpKeyword_1_0 = (Keyword)cWaterPumpEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ActuatorType:
		//    LED | WaterPump
		//;
		public EnumRule getRule() { return rule; }
		
		//LED | WaterPump
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LED
		public EnumLiteralDeclaration getLEDEnumLiteralDeclaration_0() { return cLEDEnumLiteralDeclaration_0; }
		
		public Keyword getLEDLEDKeyword_0_0() { return cLEDLEDKeyword_0_0; }
		
		//WaterPump
		public EnumLiteralDeclaration getWaterPumpEnumLiteralDeclaration_1() { return cWaterPumpEnumLiteralDeclaration_1; }
		
		public Keyword getWaterPumpWaterPumpKeyword_1_0() { return cWaterPumpWaterPumpKeyword_1_0; }
	}
	
	private final SystemElements pSystem;
	private final GraphElements pGraph;
	private final GraphTypeElements eGraphType;
	private final MasterElements pMaster;
	private final SlaveElements pSlave;
	private final SensorElements pSensor;
	private final SensorTypeElements eSensorType;
	private final ActuatorElements pActuator;
	private final ActuatorTypeElements eActuatorType;
	private final SettingElements pSetting;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DeviceDefinitionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pGraph = new GraphElements();
		this.eGraphType = new GraphTypeElements();
		this.pMaster = new MasterElements();
		this.pSlave = new SlaveElements();
		this.pSensor = new SensorElements();
		this.eSensorType = new SensorTypeElements();
		this.pActuator = new ActuatorElements();
		this.eActuatorType = new ActuatorTypeElements();
		this.pSetting = new SettingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.gms.dsl.DeviceDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//    'System' name=ID ':'
	//    master=Master
	//    graphs += Graph*
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Graph:
	//    'Graph' name=ID ':'
	//    'type' type = GraphType
	//    'category' category = STRING
	//    'title' title = STRING
	//    'xlabel' xlabel = STRING
	//    'ylabel' ylabel = STRING
	//;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}
	
	//enum GraphType:
	//    Line | BoxPlot | Histogram
	//;
	public GraphTypeElements getGraphTypeAccess() {
		return eGraphType;
	}
	
	public EnumRule getGraphTypeRule() {
		return getGraphTypeAccess().getRule();
	}
	
	//Master:
	//    'Master' name=ID ':'
	//    'bluetooth' bluetoothName=STRING
	//    slaves += Slave+
	//;
	public MasterElements getMasterAccess() {
		return pMaster;
	}
	
	public ParserRule getMasterRule() {
		return getMasterAccess().getRule();
	}
	
	//Slave:
	//    'Slave' name=ID ':'
	//    'bluetooth' bluetoothName=STRING
	//    devices += (Sensor | Actuator)*
	//;
	public SlaveElements getSlaveAccess() {
		return pSlave;
	}
	
	public ParserRule getSlaveRule() {
		return getSlaveAccess().getRule();
	}
	
	//Sensor:
	//    'Sensor' type = SensorType ':'
	//    'pins' '(' pins += INT* (',' pins += INT)* ')'
	//    'graph' graph = [Graph]
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//enum SensorType:
	//    Moisture | Temperature | HumidityAndTemperature | AirHumidity | CO2 | Light
	//;
	public SensorTypeElements getSensorTypeAccess() {
		return eSensorType;
	}
	
	public EnumRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//Actuator:
	//    'Actuator' type = ActuatorType ':'
	//    'pins' '(' pins += INT* (',' pins += INT)* ')'
	//    settings += Setting*
	//;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//enum ActuatorType:
	//    LED | WaterPump
	//;
	public ActuatorTypeElements getActuatorTypeAccess() {
		return eActuatorType;
	}
	
	public EnumRule getActuatorTypeRule() {
		return getActuatorTypeAccess().getRule();
	}
	
	//Setting:
	//    'Setting' name=ID ':'
	//    'default' value=INT
	//;
	public SettingElements getSettingAccess() {
		return pSetting;
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
